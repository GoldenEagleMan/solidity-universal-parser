# Generated from Solidity.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,136,1204,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,1,0,3,0,196,
        8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,206,8,0,10,0,12,0,209,9,
        0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,3,4,224,8,
        4,1,5,1,5,3,5,228,8,5,1,6,1,6,1,7,3,7,233,8,7,1,7,1,7,1,8,1,8,1,
        8,3,8,240,8,8,1,9,1,9,1,9,1,9,3,9,246,8,9,1,9,1,9,1,9,1,9,3,9,252,
        8,9,1,9,1,9,3,9,256,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,266,
        8,9,10,9,12,9,269,9,9,1,9,1,9,1,9,1,9,1,9,3,9,276,8,9,1,10,4,10,
        279,8,10,11,10,12,10,280,1,10,3,10,284,8,10,1,11,3,11,287,8,11,1,
        11,3,11,290,8,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,298,8,11,10,
        11,12,11,301,9,11,3,11,303,8,11,1,11,1,11,5,11,307,8,11,10,11,12,
        11,310,9,11,1,11,1,11,1,12,1,12,3,12,316,8,12,1,13,1,13,3,13,320,
        8,13,1,13,1,13,5,13,324,8,13,10,13,12,13,327,9,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,339,8,13,10,13,12,13,342,
        9,13,5,13,344,8,13,10,13,12,13,347,9,13,1,13,3,13,350,8,13,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,360,8,14,1,15,1,15,5,15,
        364,8,15,10,15,12,15,367,9,15,1,15,1,15,1,15,3,15,372,8,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,3,16,381,8,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,5,17,393,8,17,10,17,12,17,396,9,17,
        3,17,398,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
        3,19,410,8,19,1,19,1,19,1,20,1,20,1,20,3,20,417,8,20,1,20,3,20,420,
        8,20,1,21,3,21,423,8,21,1,21,1,21,3,21,427,8,21,1,21,1,21,1,21,3,
        21,432,8,21,1,21,1,21,3,21,436,8,21,1,22,1,22,1,22,1,23,1,23,1,23,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,453,8,24,10,24,
        12,24,456,9,24,1,25,3,25,459,8,25,1,25,1,25,1,25,1,25,3,25,465,8,
        25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,3,27,475,8,27,1,27,1,
        27,5,27,479,8,27,10,27,12,27,482,9,27,1,27,1,27,1,28,1,28,1,28,1,
        28,5,28,490,8,28,10,28,12,28,493,9,28,3,28,495,8,28,1,28,1,28,1,
        29,1,29,1,29,1,29,5,29,503,8,29,10,29,12,29,506,9,29,3,29,508,8,
        29,1,29,1,29,1,30,1,30,3,30,514,8,30,1,30,3,30,517,8,30,1,31,1,31,
        1,31,1,31,5,31,523,8,31,10,31,12,31,526,9,31,3,31,528,8,31,1,31,
        1,31,1,32,1,32,3,32,534,8,32,1,32,3,32,537,8,32,1,33,1,33,1,33,1,
        33,5,33,543,8,33,10,33,12,33,546,9,33,3,33,548,8,33,1,33,1,33,1,
        34,1,34,3,34,554,8,34,1,35,1,35,3,35,558,8,35,1,35,1,35,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,3,36,569,8,36,1,36,1,36,1,36,3,36,574,8,
        36,1,36,5,36,577,8,36,10,36,12,36,580,9,36,1,37,1,37,1,37,5,37,585,
        8,37,10,37,12,37,588,9,37,1,38,1,38,1,38,1,38,3,38,594,8,38,1,38,
        1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,5,39,605,8,39,10,39,12,39,
        608,9,39,1,39,1,39,3,39,612,8,39,1,39,1,39,1,39,3,39,617,8,39,1,
        39,1,39,1,39,5,39,622,8,39,10,39,12,39,625,9,39,1,39,1,39,1,39,1,
        39,1,39,3,39,632,8,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,
        43,5,43,643,8,43,10,43,12,43,646,9,43,1,43,1,43,1,44,1,44,1,44,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,3,45,669,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,
        46,678,8,46,1,46,1,46,5,46,682,8,46,10,46,12,46,685,9,46,1,47,1,
        47,3,47,689,8,47,1,47,1,47,1,47,3,47,694,8,47,1,47,1,47,3,47,698,
        8,47,1,47,1,47,1,47,3,47,703,8,47,1,48,1,48,1,48,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,3,49,715,8,49,1,50,1,50,1,51,1,51,1,52,1,52,
        1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,3,54,731,8,54,1,55,1,55,
        1,55,1,55,3,55,737,8,55,1,55,1,55,3,55,741,8,55,1,55,3,55,744,8,
        55,1,55,1,55,1,55,1,56,1,56,3,56,751,8,56,1,56,1,56,1,57,1,57,1,
        57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,
        60,3,60,771,8,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,
        63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,789,8,63,1,63,1,63,3,63,793,
        8,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,65,3,65,805,
        8,65,1,65,1,65,3,65,809,8,65,5,65,811,8,65,10,65,12,65,814,9,65,
        1,66,1,66,3,66,818,8,66,1,66,5,66,821,8,66,10,66,12,66,824,9,66,
        1,66,3,66,827,8,66,1,66,1,66,1,67,1,67,1,68,1,68,1,68,1,68,1,68,
        5,68,838,8,68,10,68,12,68,841,9,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,869,8,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,3,68,916,8,68,1,68,1,68,1,68,1,68,3,68,922,8,68,1,
        68,1,68,3,68,926,8,68,1,68,1,68,1,68,1,68,1,68,3,68,933,8,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,5,68,945,8,68,10,68,
        12,68,948,9,68,3,68,950,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,5,68,960,8,68,10,68,12,68,963,9,68,1,69,1,69,1,69,1,69,1,69,
        1,69,1,69,3,69,972,8,69,1,69,1,69,1,69,1,69,1,69,3,69,979,8,69,3,
        69,981,8,69,1,70,1,70,1,70,5,70,986,8,70,10,70,12,70,989,9,70,1,
        71,1,71,1,71,5,71,994,8,71,10,71,12,71,997,9,71,1,71,3,71,1000,8,
        71,1,72,1,72,1,72,1,72,1,73,1,73,3,73,1008,8,73,1,73,1,73,3,73,1012,
        8,73,3,73,1014,8,73,1,74,1,74,1,74,1,74,1,74,1,75,1,75,5,75,1023,
        8,75,10,75,12,75,1026,9,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,
        76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1047,
        8,76,1,77,1,77,3,77,1051,8,77,1,78,1,78,1,78,1,78,3,78,1057,8,78,
        1,78,1,78,3,78,1061,8,78,1,78,1,78,5,78,1065,8,78,10,78,12,78,1068,
        9,78,1,78,3,78,1071,8,78,1,79,1,79,1,79,1,79,3,79,1077,8,79,1,80,
        1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,3,81,1088,8,81,1,82,1,82,
        1,82,5,82,1093,8,82,10,82,12,82,1096,9,82,1,83,1,83,1,83,1,84,1,
        84,1,84,1,85,1,85,1,85,5,85,1107,8,85,10,85,12,85,1110,9,85,1,86,
        1,86,1,86,1,86,1,86,1,86,3,86,1118,8,86,1,87,1,87,1,87,1,87,3,87,
        1124,8,87,1,87,1,87,3,87,1128,8,87,1,87,1,87,1,88,1,88,1,88,1,89,
        1,89,1,89,3,89,1138,8,89,1,89,1,89,1,89,3,89,1143,8,89,1,89,1,89,
        1,90,1,90,1,90,1,90,1,91,1,91,1,92,1,92,1,92,1,92,1,93,1,93,3,93,
        1159,8,93,1,93,1,93,3,93,1163,8,93,5,93,1165,8,93,10,93,12,93,1168,
        9,93,1,93,1,93,1,93,1,93,1,93,5,93,1175,8,93,10,93,12,93,1178,9,
        93,3,93,1180,8,93,1,93,3,93,1183,8,93,1,94,1,94,3,94,1187,8,94,1,
        95,1,95,3,95,1191,8,95,1,96,1,96,1,96,1,96,5,96,1197,8,96,10,96,
        12,96,1200,9,96,3,96,1202,8,96,1,96,0,2,72,136,97,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,0,20,1,0,
        3,9,1,0,18,20,3,0,116,118,123,123,125,126,1,0,32,34,3,0,121,121,
        123,123,125,126,1,0,44,46,4,0,116,116,124,124,127,127,129,129,3,
        0,40,40,58,61,102,106,2,0,4,4,62,66,2,0,66,66,68,68,2,0,65,65,69,
        69,2,0,12,12,71,72,1,0,73,75,1,0,5,8,1,0,78,79,2,0,9,9,83,93,1,0,
        62,63,3,0,109,110,112,112,131,131,1,0,109,110,3,0,13,13,46,46,130,
        130,1333,0,195,1,0,0,0,2,212,1,0,0,0,4,214,1,0,0,0,6,219,1,0,0,0,
        8,223,1,0,0,0,10,225,1,0,0,0,12,229,1,0,0,0,14,232,1,0,0,0,16,236,
        1,0,0,0,18,275,1,0,0,0,20,283,1,0,0,0,22,286,1,0,0,0,24,313,1,0,
        0,0,26,349,1,0,0,0,28,359,1,0,0,0,30,361,1,0,0,0,32,375,1,0,0,0,
        34,384,1,0,0,0,36,401,1,0,0,0,38,406,1,0,0,0,40,413,1,0,0,0,42,422,
        1,0,0,0,44,437,1,0,0,0,46,440,1,0,0,0,48,454,1,0,0,0,50,458,1,0,
        0,0,52,468,1,0,0,0,54,470,1,0,0,0,56,485,1,0,0,0,58,498,1,0,0,0,
        60,511,1,0,0,0,62,518,1,0,0,0,64,531,1,0,0,0,66,538,1,0,0,0,68,551,
        1,0,0,0,70,555,1,0,0,0,72,568,1,0,0,0,74,581,1,0,0,0,76,589,1,0,
        0,0,78,631,1,0,0,0,80,633,1,0,0,0,82,635,1,0,0,0,84,637,1,0,0,0,
        86,639,1,0,0,0,88,649,1,0,0,0,90,668,1,0,0,0,92,670,1,0,0,0,94,702,
        1,0,0,0,96,704,1,0,0,0,98,707,1,0,0,0,100,716,1,0,0,0,102,718,1,
        0,0,0,104,720,1,0,0,0,106,722,1,0,0,0,108,730,1,0,0,0,110,732,1,
        0,0,0,112,748,1,0,0,0,114,754,1,0,0,0,116,762,1,0,0,0,118,765,1,
        0,0,0,120,768,1,0,0,0,122,774,1,0,0,0,124,777,1,0,0,0,126,788,1,
        0,0,0,128,796,1,0,0,0,130,804,1,0,0,0,132,815,1,0,0,0,134,830,1,
        0,0,0,136,868,1,0,0,0,138,980,1,0,0,0,140,982,1,0,0,0,142,990,1,
        0,0,0,144,1001,1,0,0,0,146,1013,1,0,0,0,148,1015,1,0,0,0,150,1020,
        1,0,0,0,152,1046,1,0,0,0,154,1050,1,0,0,0,156,1056,1,0,0,0,158,1072,
        1,0,0,0,160,1078,1,0,0,0,162,1087,1,0,0,0,164,1089,1,0,0,0,166,1097,
        1,0,0,0,168,1100,1,0,0,0,170,1103,1,0,0,0,172,1117,1,0,0,0,174,1119,
        1,0,0,0,176,1131,1,0,0,0,178,1134,1,0,0,0,180,1146,1,0,0,0,182,1150,
        1,0,0,0,184,1152,1,0,0,0,186,1182,1,0,0,0,188,1186,1,0,0,0,190,1188,
        1,0,0,0,192,1201,1,0,0,0,194,196,3,2,1,0,195,194,1,0,0,0,195,196,
        1,0,0,0,196,207,1,0,0,0,197,206,3,20,10,0,198,206,3,4,2,0,199,206,
        3,18,9,0,200,206,3,22,11,0,201,206,3,42,21,0,202,206,3,128,64,0,
        203,206,3,34,17,0,204,206,3,54,27,0,205,197,1,0,0,0,205,198,1,0,
        0,0,205,199,1,0,0,0,205,200,1,0,0,0,205,201,1,0,0,0,205,202,1,0,
        0,0,205,203,1,0,0,0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,1,0,
        0,0,207,208,1,0,0,0,208,210,1,0,0,0,209,207,1,0,0,0,210,211,5,0,
        0,1,211,1,1,0,0,0,212,213,5,101,0,0,213,3,1,0,0,0,214,215,5,1,0,
        0,215,216,3,6,3,0,216,217,3,8,4,0,217,218,5,2,0,0,218,5,1,0,0,0,
        219,220,3,192,96,0,220,7,1,0,0,0,221,224,3,10,5,0,222,224,3,136,
        68,0,223,221,1,0,0,0,223,222,1,0,0,0,224,9,1,0,0,0,225,227,3,14,
        7,0,226,228,3,14,7,0,227,226,1,0,0,0,227,228,1,0,0,0,228,11,1,0,
        0,0,229,230,7,0,0,0,230,13,1,0,0,0,231,233,3,12,6,0,232,231,1,0,
        0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,235,5,107,0,0,235,15,1,0,
        0,0,236,239,3,192,96,0,237,238,5,10,0,0,238,240,3,192,96,0,239,237,
        1,0,0,0,239,240,1,0,0,0,240,17,1,0,0,0,241,242,5,11,0,0,242,245,
        5,131,0,0,243,244,5,10,0,0,244,246,3,192,96,0,245,243,1,0,0,0,245,
        246,1,0,0,0,246,247,1,0,0,0,247,276,5,2,0,0,248,251,5,11,0,0,249,
        252,5,12,0,0,250,252,3,192,96,0,251,249,1,0,0,0,251,250,1,0,0,0,
        252,255,1,0,0,0,253,254,5,10,0,0,254,256,3,192,96,0,255,253,1,0,
        0,0,255,256,1,0,0,0,256,257,1,0,0,0,257,258,5,13,0,0,258,259,5,131,
        0,0,259,276,5,2,0,0,260,261,5,11,0,0,261,262,5,14,0,0,262,267,3,
        16,8,0,263,264,5,15,0,0,264,266,3,16,8,0,265,263,1,0,0,0,266,269,
        1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,270,1,0,0,0,269,267,
        1,0,0,0,270,271,5,16,0,0,271,272,5,13,0,0,272,273,5,131,0,0,273,
        274,5,2,0,0,274,276,1,0,0,0,275,241,1,0,0,0,275,248,1,0,0,0,275,
        260,1,0,0,0,276,19,1,0,0,0,277,279,5,133,0,0,278,277,1,0,0,0,279,
        280,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,284,1,0,0,0,282,
        284,5,134,0,0,283,278,1,0,0,0,283,282,1,0,0,0,284,21,1,0,0,0,285,
        287,3,20,10,0,286,285,1,0,0,0,286,287,1,0,0,0,287,289,1,0,0,0,288,
        290,5,17,0,0,289,288,1,0,0,0,289,290,1,0,0,0,290,291,1,0,0,0,291,
        292,7,1,0,0,292,302,3,192,96,0,293,294,5,21,0,0,294,299,3,24,12,
        0,295,296,5,15,0,0,296,298,3,24,12,0,297,295,1,0,0,0,298,301,1,0,
        0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,303,1,0,0,0,301,299,1,0,
        0,0,302,293,1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,308,5,14,
        0,0,305,307,3,28,14,0,306,305,1,0,0,0,307,310,1,0,0,0,308,306,1,
        0,0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,308,1,0,0,0,311,312,5,
        16,0,0,312,23,1,0,0,0,313,315,3,74,37,0,314,316,3,26,13,0,315,314,
        1,0,0,0,315,316,1,0,0,0,316,25,1,0,0,0,317,319,5,22,0,0,318,320,
        3,136,68,0,319,318,1,0,0,0,319,320,1,0,0,0,320,325,1,0,0,0,321,322,
        5,15,0,0,322,324,3,136,68,0,323,321,1,0,0,0,324,327,1,0,0,0,325,
        323,1,0,0,0,325,326,1,0,0,0,326,328,1,0,0,0,327,325,1,0,0,0,328,
        350,5,23,0,0,329,345,5,24,0,0,330,331,3,192,96,0,331,332,5,25,0,
        0,332,340,3,136,68,0,333,334,5,15,0,0,334,335,3,192,96,0,335,336,
        5,25,0,0,336,337,3,136,68,0,337,339,1,0,0,0,338,333,1,0,0,0,339,
        342,1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,344,1,0,0,0,342,
        340,1,0,0,0,343,330,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,
        346,1,0,0,0,346,348,1,0,0,0,347,345,1,0,0,0,348,350,5,26,0,0,349,
        317,1,0,0,0,349,329,1,0,0,0,350,27,1,0,0,0,351,360,3,30,15,0,352,
        360,3,32,16,0,353,360,3,34,17,0,354,360,3,36,18,0,355,360,3,38,19,
        0,356,360,3,42,21,0,357,360,3,50,25,0,358,360,3,54,27,0,359,351,
        1,0,0,0,359,352,1,0,0,0,359,353,1,0,0,0,359,354,1,0,0,0,359,355,
        1,0,0,0,359,356,1,0,0,0,359,357,1,0,0,0,359,358,1,0,0,0,360,29,1,
        0,0,0,361,365,3,72,36,0,362,364,7,2,0,0,363,362,1,0,0,0,364,367,
        1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,368,1,0,0,0,367,365,
        1,0,0,0,368,371,3,192,96,0,369,370,5,9,0,0,370,372,3,136,68,0,371,
        369,1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,374,5,2,0,0,374,
        31,1,0,0,0,375,376,5,27,0,0,376,377,3,192,96,0,377,380,5,28,0,0,
        378,381,5,12,0,0,379,381,3,72,36,0,380,378,1,0,0,0,380,379,1,0,0,
        0,381,382,1,0,0,0,382,383,5,2,0,0,383,33,1,0,0,0,384,385,5,29,0,
        0,385,386,3,192,96,0,386,397,5,14,0,0,387,388,3,70,35,0,388,394,
        5,2,0,0,389,390,3,70,35,0,390,391,5,2,0,0,391,393,1,0,0,0,392,389,
        1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,398,
        1,0,0,0,396,394,1,0,0,0,397,387,1,0,0,0,397,398,1,0,0,0,398,399,
        1,0,0,0,399,400,5,16,0,0,400,35,1,0,0,0,401,402,5,30,0,0,402,403,
        3,56,28,0,403,404,3,48,24,0,404,405,3,86,43,0,405,37,1,0,0,0,406,
        407,5,31,0,0,407,409,3,192,96,0,408,410,3,56,28,0,409,408,1,0,0,
        0,409,410,1,0,0,0,410,411,1,0,0,0,411,412,3,86,43,0,412,39,1,0,0,
        0,413,419,3,192,96,0,414,416,5,22,0,0,415,417,3,140,70,0,416,415,
        1,0,0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,420,5,23,0,0,419,414,
        1,0,0,0,419,420,1,0,0,0,420,41,1,0,0,0,421,423,3,20,10,0,422,421,
        1,0,0,0,422,423,1,0,0,0,423,424,1,0,0,0,424,426,7,3,0,0,425,427,
        3,192,96,0,426,425,1,0,0,0,426,427,1,0,0,0,427,428,1,0,0,0,428,429,
        3,56,28,0,429,431,3,48,24,0,430,432,3,44,22,0,431,430,1,0,0,0,431,
        432,1,0,0,0,432,435,1,0,0,0,433,436,5,2,0,0,434,436,3,86,43,0,435,
        433,1,0,0,0,435,434,1,0,0,0,436,43,1,0,0,0,437,438,5,35,0,0,438,
        439,3,56,28,0,439,45,1,0,0,0,440,441,5,117,0,0,441,442,3,56,28,0,
        442,47,1,0,0,0,443,453,3,40,20,0,444,453,3,84,42,0,445,453,5,121,
        0,0,446,453,5,126,0,0,447,453,5,123,0,0,448,453,5,125,0,0,449,453,
        5,117,0,0,450,453,3,46,23,0,451,453,5,119,0,0,452,443,1,0,0,0,452,
        444,1,0,0,0,452,445,1,0,0,0,452,446,1,0,0,0,452,447,1,0,0,0,452,
        448,1,0,0,0,452,449,1,0,0,0,452,450,1,0,0,0,452,451,1,0,0,0,453,
        456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,49,1,0,0,0,456,454,
        1,0,0,0,457,459,3,20,10,0,458,457,1,0,0,0,458,459,1,0,0,0,459,460,
        1,0,0,0,460,461,5,36,0,0,461,462,3,192,96,0,462,464,3,62,31,0,463,
        465,5,114,0,0,464,463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,
        467,5,2,0,0,467,51,1,0,0,0,468,469,3,192,96,0,469,53,1,0,0,0,470,
        471,5,37,0,0,471,472,3,192,96,0,472,474,5,14,0,0,473,475,3,52,26,
        0,474,473,1,0,0,0,474,475,1,0,0,0,475,480,1,0,0,0,476,477,5,15,0,
        0,477,479,3,52,26,0,478,476,1,0,0,0,479,482,1,0,0,0,480,478,1,0,
        0,0,480,481,1,0,0,0,481,483,1,0,0,0,482,480,1,0,0,0,483,484,5,16,
        0,0,484,55,1,0,0,0,485,494,5,22,0,0,486,491,3,60,30,0,487,488,5,
        15,0,0,488,490,3,60,30,0,489,487,1,0,0,0,490,493,1,0,0,0,491,489,
        1,0,0,0,491,492,1,0,0,0,492,495,1,0,0,0,493,491,1,0,0,0,494,486,
        1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,0,496,497,5,23,0,0,497,57,
        1,0,0,0,498,507,5,22,0,0,499,504,3,60,30,0,500,501,5,15,0,0,501,
        503,3,60,30,0,502,500,1,0,0,0,503,506,1,0,0,0,504,502,1,0,0,0,504,
        505,1,0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,507,499,1,0,0,0,507,
        508,1,0,0,0,508,509,1,0,0,0,509,510,5,23,0,0,510,59,1,0,0,0,511,
        513,3,72,36,0,512,514,3,82,41,0,513,512,1,0,0,0,513,514,1,0,0,0,
        514,516,1,0,0,0,515,517,3,192,96,0,516,515,1,0,0,0,516,517,1,0,0,
        0,517,61,1,0,0,0,518,527,5,22,0,0,519,524,3,64,32,0,520,521,5,15,
        0,0,521,523,3,64,32,0,522,520,1,0,0,0,523,526,1,0,0,0,524,522,1,
        0,0,0,524,525,1,0,0,0,525,528,1,0,0,0,526,524,1,0,0,0,527,519,1,
        0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,530,5,23,0,0,530,63,1,
        0,0,0,531,533,3,72,36,0,532,534,5,122,0,0,533,532,1,0,0,0,533,534,
        1,0,0,0,534,536,1,0,0,0,535,537,3,192,96,0,536,535,1,0,0,0,536,537,
        1,0,0,0,537,65,1,0,0,0,538,547,5,22,0,0,539,544,3,68,34,0,540,541,
        5,15,0,0,541,543,3,68,34,0,542,540,1,0,0,0,543,546,1,0,0,0,544,542,
        1,0,0,0,544,545,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,547,539,
        1,0,0,0,547,548,1,0,0,0,548,549,1,0,0,0,549,550,5,23,0,0,550,67,
        1,0,0,0,551,553,3,72,36,0,552,554,3,82,41,0,553,552,1,0,0,0,553,
        554,1,0,0,0,554,69,1,0,0,0,555,557,3,72,36,0,556,558,3,82,41,0,557,
        556,1,0,0,0,557,558,1,0,0,0,558,559,1,0,0,0,559,560,3,192,96,0,560,
        71,1,0,0,0,561,562,6,36,-1,0,562,569,3,134,67,0,563,569,3,74,37,
        0,564,569,3,76,38,0,565,569,3,78,39,0,566,567,5,40,0,0,567,569,5,
        124,0,0,568,561,1,0,0,0,568,563,1,0,0,0,568,564,1,0,0,0,568,565,
        1,0,0,0,568,566,1,0,0,0,569,578,1,0,0,0,570,571,10,3,0,0,571,573,
        5,38,0,0,572,574,3,136,68,0,573,572,1,0,0,0,573,574,1,0,0,0,574,
        575,1,0,0,0,575,577,5,39,0,0,576,570,1,0,0,0,577,580,1,0,0,0,578,
        576,1,0,0,0,578,579,1,0,0,0,579,73,1,0,0,0,580,578,1,0,0,0,581,586,
        3,192,96,0,582,583,5,41,0,0,583,585,3,192,96,0,584,582,1,0,0,0,585,
        588,1,0,0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,75,1,0,0,0,588,586,
        1,0,0,0,589,590,5,42,0,0,590,593,5,22,0,0,591,594,3,134,67,0,592,
        594,3,74,37,0,593,591,1,0,0,0,593,592,1,0,0,0,594,595,1,0,0,0,595,
        596,5,43,0,0,596,597,3,72,36,0,597,598,5,23,0,0,598,77,1,0,0,0,599,
        600,5,32,0,0,600,606,3,66,33,0,601,605,5,123,0,0,602,605,5,121,0,
        0,603,605,3,84,42,0,604,601,1,0,0,0,604,602,1,0,0,0,604,603,1,0,
        0,0,605,608,1,0,0,0,606,604,1,0,0,0,606,607,1,0,0,0,607,611,1,0,
        0,0,608,606,1,0,0,0,609,610,5,35,0,0,610,612,3,66,33,0,611,609,1,
        0,0,0,611,612,1,0,0,0,612,632,1,0,0,0,613,614,5,32,0,0,614,616,5,
        22,0,0,615,617,3,56,28,0,616,615,1,0,0,0,616,617,1,0,0,0,617,618,
        1,0,0,0,618,623,5,23,0,0,619,622,3,80,40,0,620,622,3,84,42,0,621,
        619,1,0,0,0,621,620,1,0,0,0,622,625,1,0,0,0,623,621,1,0,0,0,623,
        624,1,0,0,0,624,626,1,0,0,0,625,623,1,0,0,0,626,627,5,35,0,0,627,
        628,5,22,0,0,628,629,3,56,28,0,629,630,5,23,0,0,630,632,1,0,0,0,
        631,599,1,0,0,0,631,613,1,0,0,0,632,79,1,0,0,0,633,634,7,4,0,0,634,
        81,1,0,0,0,635,636,7,5,0,0,636,83,1,0,0,0,637,638,7,6,0,0,638,85,
        1,0,0,0,639,644,5,14,0,0,640,643,3,90,45,0,641,643,3,88,44,0,642,
        640,1,0,0,0,642,641,1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,
        645,1,0,0,0,645,647,1,0,0,0,646,644,1,0,0,0,647,648,5,16,0,0,648,
        87,1,0,0,0,649,650,5,47,0,0,650,651,3,86,43,0,651,89,1,0,0,0,652,
        669,3,98,49,0,653,669,3,106,53,0,654,669,3,110,55,0,655,669,3,86,
        43,0,656,669,3,112,56,0,657,669,3,114,57,0,658,669,3,116,58,0,659,
        669,3,118,59,0,660,669,3,120,60,0,661,669,3,122,61,0,662,669,3,124,
        62,0,663,669,3,108,54,0,664,669,3,92,46,0,665,669,3,94,47,0,666,
        669,5,135,0,0,667,669,5,136,0,0,668,652,1,0,0,0,668,653,1,0,0,0,
        668,654,1,0,0,0,668,655,1,0,0,0,668,656,1,0,0,0,668,657,1,0,0,0,
        668,658,1,0,0,0,668,659,1,0,0,0,668,660,1,0,0,0,668,661,1,0,0,0,
        668,662,1,0,0,0,668,663,1,0,0,0,668,664,1,0,0,0,668,665,1,0,0,0,
        668,666,1,0,0,0,668,667,1,0,0,0,669,91,1,0,0,0,670,671,5,48,0,0,
        671,677,3,136,68,0,672,673,5,35,0,0,673,674,5,22,0,0,674,675,3,56,
        28,0,675,676,5,23,0,0,676,678,1,0,0,0,677,672,1,0,0,0,677,678,1,
        0,0,0,678,679,1,0,0,0,679,683,3,86,43,0,680,682,3,94,47,0,681,680,
        1,0,0,0,682,685,1,0,0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,93,1,
        0,0,0,685,683,1,0,0,0,686,697,5,49,0,0,687,689,3,192,96,0,688,687,
        1,0,0,0,688,689,1,0,0,0,689,690,1,0,0,0,690,691,5,22,0,0,691,693,
        3,56,28,0,692,694,3,20,10,0,693,692,1,0,0,0,693,694,1,0,0,0,694,
        695,1,0,0,0,695,696,5,23,0,0,696,698,1,0,0,0,697,688,1,0,0,0,697,
        698,1,0,0,0,698,699,1,0,0,0,699,703,3,86,43,0,700,701,5,49,0,0,701,
        703,3,86,43,0,702,686,1,0,0,0,702,700,1,0,0,0,703,95,1,0,0,0,704,
        705,3,136,68,0,705,706,5,2,0,0,706,97,1,0,0,0,707,708,5,50,0,0,708,
        709,5,22,0,0,709,710,3,100,50,0,710,711,5,23,0,0,711,714,3,102,51,
        0,712,713,5,51,0,0,713,715,3,104,52,0,714,712,1,0,0,0,714,715,1,
        0,0,0,715,99,1,0,0,0,716,717,3,136,68,0,717,101,1,0,0,0,718,719,
        3,90,45,0,719,103,1,0,0,0,720,721,3,90,45,0,721,105,1,0,0,0,722,
        723,5,52,0,0,723,724,5,22,0,0,724,725,3,136,68,0,725,726,5,23,0,
        0,726,727,3,90,45,0,727,107,1,0,0,0,728,731,3,126,63,0,729,731,3,
        96,48,0,730,728,1,0,0,0,730,729,1,0,0,0,731,109,1,0,0,0,732,733,
        5,28,0,0,733,736,5,22,0,0,734,737,3,108,54,0,735,737,5,2,0,0,736,
        734,1,0,0,0,736,735,1,0,0,0,737,740,1,0,0,0,738,741,3,96,48,0,739,
        741,5,2,0,0,740,738,1,0,0,0,740,739,1,0,0,0,741,743,1,0,0,0,742,
        744,3,136,68,0,743,742,1,0,0,0,743,744,1,0,0,0,744,745,1,0,0,0,745,
        746,5,23,0,0,746,747,3,90,45,0,747,111,1,0,0,0,748,750,5,53,0,0,
        749,751,5,131,0,0,750,749,1,0,0,0,750,751,1,0,0,0,751,752,1,0,0,
        0,752,753,3,150,75,0,753,113,1,0,0,0,754,755,5,54,0,0,755,756,3,
        90,45,0,756,757,5,52,0,0,757,758,5,22,0,0,758,759,3,136,68,0,759,
        760,5,23,0,0,760,761,5,2,0,0,761,115,1,0,0,0,762,763,5,120,0,0,763,
        764,5,2,0,0,764,117,1,0,0,0,765,766,5,115,0,0,766,767,5,2,0,0,767,
        119,1,0,0,0,768,770,5,55,0,0,769,771,3,136,68,0,770,769,1,0,0,0,
        770,771,1,0,0,0,771,772,1,0,0,0,772,773,5,2,0,0,773,121,1,0,0,0,
        774,775,5,56,0,0,775,776,5,2,0,0,776,123,1,0,0,0,777,778,5,57,0,
        0,778,779,3,148,74,0,779,780,5,2,0,0,780,125,1,0,0,0,781,782,5,58,
        0,0,782,789,3,132,66,0,783,789,3,70,35,0,784,785,5,22,0,0,785,786,
        3,130,65,0,786,787,5,23,0,0,787,789,1,0,0,0,788,781,1,0,0,0,788,
        783,1,0,0,0,788,784,1,0,0,0,789,792,1,0,0,0,790,791,5,9,0,0,791,
        793,3,136,68,0,792,790,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,
        795,5,2,0,0,795,127,1,0,0,0,796,797,3,72,36,0,797,798,5,116,0,0,
        798,799,3,192,96,0,799,800,5,9,0,0,800,801,3,136,68,0,801,802,5,
        2,0,0,802,129,1,0,0,0,803,805,3,70,35,0,804,803,1,0,0,0,804,805,
        1,0,0,0,805,812,1,0,0,0,806,808,5,15,0,0,807,809,3,70,35,0,808,807,
        1,0,0,0,808,809,1,0,0,0,809,811,1,0,0,0,810,806,1,0,0,0,811,814,
        1,0,0,0,812,810,1,0,0,0,812,813,1,0,0,0,813,131,1,0,0,0,814,812,
        1,0,0,0,815,822,5,22,0,0,816,818,3,192,96,0,817,816,1,0,0,0,817,
        818,1,0,0,0,818,819,1,0,0,0,819,821,5,15,0,0,820,817,1,0,0,0,821,
        824,1,0,0,0,822,820,1,0,0,0,822,823,1,0,0,0,823,826,1,0,0,0,824,
        822,1,0,0,0,825,827,3,192,96,0,826,825,1,0,0,0,826,827,1,0,0,0,827,
        828,1,0,0,0,828,829,5,23,0,0,829,133,1,0,0,0,830,831,7,7,0,0,831,
        135,1,0,0,0,832,833,6,68,-1,0,833,834,5,38,0,0,834,839,3,136,68,
        0,835,836,5,15,0,0,836,838,3,136,68,0,837,835,1,0,0,0,838,841,1,
        0,0,0,839,837,1,0,0,0,839,840,1,0,0,0,840,842,1,0,0,0,841,839,1,
        0,0,0,842,843,5,39,0,0,843,869,1,0,0,0,844,845,5,124,0,0,845,869,
        3,26,13,0,846,847,5,128,0,0,847,848,5,22,0,0,848,849,3,72,36,0,849,
        850,5,23,0,0,850,869,1,0,0,0,851,852,7,8,0,0,852,869,3,136,68,23,
        853,854,5,67,0,0,854,869,3,72,36,0,855,856,5,22,0,0,856,857,3,136,
        68,0,857,858,5,23,0,0,858,869,1,0,0,0,859,860,7,9,0,0,860,869,3,
        136,68,18,861,862,7,10,0,0,862,869,3,136,68,17,863,864,5,64,0,0,
        864,869,3,136,68,16,865,866,5,4,0,0,866,869,3,136,68,15,867,869,
        3,138,69,0,868,832,1,0,0,0,868,844,1,0,0,0,868,846,1,0,0,0,868,851,
        1,0,0,0,868,853,1,0,0,0,868,855,1,0,0,0,868,859,1,0,0,0,868,861,
        1,0,0,0,868,863,1,0,0,0,868,865,1,0,0,0,868,867,1,0,0,0,869,961,
        1,0,0,0,870,871,10,14,0,0,871,872,5,70,0,0,872,960,3,136,68,15,873,
        874,10,13,0,0,874,875,7,11,0,0,875,960,3,136,68,14,876,877,10,12,
        0,0,877,878,7,9,0,0,878,960,3,136,68,13,879,880,10,11,0,0,880,881,
        7,12,0,0,881,960,3,136,68,12,882,883,10,10,0,0,883,884,5,76,0,0,
        884,960,3,136,68,11,885,886,10,9,0,0,886,887,5,3,0,0,887,960,3,136,
        68,10,888,889,10,8,0,0,889,890,5,77,0,0,890,960,3,136,68,9,891,892,
        10,7,0,0,892,893,7,13,0,0,893,960,3,136,68,8,894,895,10,6,0,0,895,
        896,7,14,0,0,896,960,3,136,68,7,897,898,10,5,0,0,898,899,5,80,0,
        0,899,960,3,136,68,6,900,901,10,4,0,0,901,902,5,81,0,0,902,960,3,
        136,68,5,903,904,10,3,0,0,904,905,5,82,0,0,905,906,3,136,68,0,906,
        907,5,25,0,0,907,908,3,136,68,4,908,960,1,0,0,0,909,910,10,2,0,0,
        910,911,7,15,0,0,911,960,3,136,68,3,912,913,10,30,0,0,913,915,5,
        38,0,0,914,916,3,136,68,0,915,914,1,0,0,0,915,916,1,0,0,0,916,917,
        1,0,0,0,917,960,5,39,0,0,918,919,10,28,0,0,919,921,5,38,0,0,920,
        922,3,136,68,0,921,920,1,0,0,0,921,922,1,0,0,0,922,923,1,0,0,0,923,
        925,5,25,0,0,924,926,3,136,68,0,925,924,1,0,0,0,925,926,1,0,0,0,
        926,927,1,0,0,0,927,960,5,39,0,0,928,929,10,27,0,0,929,932,5,41,
        0,0,930,933,3,192,96,0,931,933,5,40,0,0,932,930,1,0,0,0,932,931,
        1,0,0,0,933,960,1,0,0,0,934,935,10,26,0,0,935,949,5,14,0,0,936,937,
        3,192,96,0,937,938,5,25,0,0,938,946,3,136,68,0,939,940,5,15,0,0,
        940,941,3,192,96,0,941,942,5,25,0,0,942,943,3,136,68,0,943,945,1,
        0,0,0,944,939,1,0,0,0,945,948,1,0,0,0,946,944,1,0,0,0,946,947,1,
        0,0,0,947,950,1,0,0,0,948,946,1,0,0,0,949,936,1,0,0,0,949,950,1,
        0,0,0,950,951,1,0,0,0,951,960,5,16,0,0,952,953,10,22,0,0,953,960,
        7,16,0,0,954,955,10,20,0,0,955,956,5,22,0,0,956,957,3,146,73,0,957,
        958,5,23,0,0,958,960,1,0,0,0,959,870,1,0,0,0,959,873,1,0,0,0,959,
        876,1,0,0,0,959,879,1,0,0,0,959,882,1,0,0,0,959,885,1,0,0,0,959,
        888,1,0,0,0,959,891,1,0,0,0,959,894,1,0,0,0,959,897,1,0,0,0,959,
        900,1,0,0,0,959,903,1,0,0,0,959,909,1,0,0,0,959,912,1,0,0,0,959,
        918,1,0,0,0,959,928,1,0,0,0,959,934,1,0,0,0,959,952,1,0,0,0,959,
        954,1,0,0,0,960,963,1,0,0,0,961,959,1,0,0,0,961,962,1,0,0,0,962,
        137,1,0,0,0,963,961,1,0,0,0,964,981,5,108,0,0,965,981,3,190,95,0,
        966,981,5,112,0,0,967,981,5,131,0,0,968,971,3,192,96,0,969,970,5,
        38,0,0,970,972,5,39,0,0,971,969,1,0,0,0,971,972,1,0,0,0,972,981,
        1,0,0,0,973,981,5,128,0,0,974,981,3,186,93,0,975,978,3,188,94,0,
        976,977,5,38,0,0,977,979,5,39,0,0,978,976,1,0,0,0,978,979,1,0,0,
        0,979,981,1,0,0,0,980,964,1,0,0,0,980,965,1,0,0,0,980,966,1,0,0,
        0,980,967,1,0,0,0,980,968,1,0,0,0,980,973,1,0,0,0,980,974,1,0,0,
        0,980,975,1,0,0,0,981,139,1,0,0,0,982,987,3,136,68,0,983,984,5,15,
        0,0,984,986,3,136,68,0,985,983,1,0,0,0,986,989,1,0,0,0,987,985,1,
        0,0,0,987,988,1,0,0,0,988,141,1,0,0,0,989,987,1,0,0,0,990,995,3,
        144,72,0,991,992,5,15,0,0,992,994,3,144,72,0,993,991,1,0,0,0,994,
        997,1,0,0,0,995,993,1,0,0,0,995,996,1,0,0,0,996,999,1,0,0,0,997,
        995,1,0,0,0,998,1000,5,15,0,0,999,998,1,0,0,0,999,1000,1,0,0,0,1000,
        143,1,0,0,0,1001,1002,3,192,96,0,1002,1003,5,25,0,0,1003,1004,3,
        136,68,0,1004,145,1,0,0,0,1005,1007,5,14,0,0,1006,1008,3,142,71,
        0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,1008,1009,1,0,0,0,1009,1014,
        5,16,0,0,1010,1012,3,140,70,0,1011,1010,1,0,0,0,1011,1012,1,0,0,
        0,1012,1014,1,0,0,0,1013,1005,1,0,0,0,1013,1011,1,0,0,0,1014,147,
        1,0,0,0,1015,1016,3,136,68,0,1016,1017,5,22,0,0,1017,1018,3,146,
        73,0,1018,1019,5,23,0,0,1019,149,1,0,0,0,1020,1024,5,14,0,0,1021,
        1023,3,152,76,0,1022,1021,1,0,0,0,1023,1026,1,0,0,0,1024,1022,1,
        0,0,0,1024,1025,1,0,0,0,1025,1027,1,0,0,0,1026,1024,1,0,0,0,1027,
        1028,5,16,0,0,1028,151,1,0,0,0,1029,1047,3,192,96,0,1030,1047,3,
        150,75,0,1031,1047,3,154,77,0,1032,1047,3,158,79,0,1033,1047,3,160,
        80,0,1034,1047,3,166,83,0,1035,1047,3,168,84,0,1036,1047,3,170,85,
        0,1037,1047,3,174,87,0,1038,1047,3,178,89,0,1039,1047,3,180,90,0,
        1040,1047,5,115,0,0,1041,1047,5,120,0,0,1042,1047,3,184,92,0,1043,
        1047,3,190,95,0,1044,1047,5,131,0,0,1045,1047,5,112,0,0,1046,1029,
        1,0,0,0,1046,1030,1,0,0,0,1046,1031,1,0,0,0,1046,1032,1,0,0,0,1046,
        1033,1,0,0,0,1046,1034,1,0,0,0,1046,1035,1,0,0,0,1046,1036,1,0,0,
        0,1046,1037,1,0,0,0,1046,1038,1,0,0,0,1046,1039,1,0,0,0,1046,1040,
        1,0,0,0,1046,1041,1,0,0,0,1046,1042,1,0,0,0,1046,1043,1,0,0,0,1046,
        1044,1,0,0,0,1046,1045,1,0,0,0,1047,153,1,0,0,0,1048,1051,3,156,
        78,0,1049,1051,3,182,91,0,1050,1048,1,0,0,0,1050,1049,1,0,0,0,1051,
        155,1,0,0,0,1052,1057,5,55,0,0,1053,1057,5,40,0,0,1054,1057,5,61,
        0,0,1055,1057,3,192,96,0,1056,1052,1,0,0,0,1056,1053,1,0,0,0,1056,
        1054,1,0,0,0,1056,1055,1,0,0,0,1057,1070,1,0,0,0,1058,1060,5,22,
        0,0,1059,1061,3,154,77,0,1060,1059,1,0,0,0,1060,1061,1,0,0,0,1061,
        1066,1,0,0,0,1062,1063,5,15,0,0,1063,1065,3,154,77,0,1064,1062,1,
        0,0,0,1065,1068,1,0,0,0,1066,1064,1,0,0,0,1066,1067,1,0,0,0,1067,
        1069,1,0,0,0,1068,1066,1,0,0,0,1069,1071,5,23,0,0,1070,1058,1,0,
        0,0,1070,1071,1,0,0,0,1071,157,1,0,0,0,1072,1073,5,94,0,0,1073,1076,
        3,162,81,0,1074,1075,5,95,0,0,1075,1077,3,154,77,0,1076,1074,1,0,
        0,0,1076,1077,1,0,0,0,1077,159,1,0,0,0,1078,1079,3,162,81,0,1079,
        1080,5,95,0,0,1080,1081,3,154,77,0,1081,161,1,0,0,0,1082,1088,3,
        192,96,0,1083,1084,5,22,0,0,1084,1085,3,164,82,0,1085,1086,5,23,
        0,0,1086,1088,1,0,0,0,1087,1082,1,0,0,0,1087,1083,1,0,0,0,1088,163,
        1,0,0,0,1089,1094,3,192,96,0,1090,1091,5,15,0,0,1091,1093,3,192,
        96,0,1092,1090,1,0,0,0,1093,1096,1,0,0,0,1094,1092,1,0,0,0,1094,
        1095,1,0,0,0,1095,165,1,0,0,0,1096,1094,1,0,0,0,1097,1098,5,96,0,
        0,1098,1099,3,192,96,0,1099,167,1,0,0,0,1100,1101,3,192,96,0,1101,
        1102,5,25,0,0,1102,169,1,0,0,0,1103,1104,5,97,0,0,1104,1108,3,154,
        77,0,1105,1107,3,172,86,0,1106,1105,1,0,0,0,1107,1110,1,0,0,0,1108,
        1106,1,0,0,0,1108,1109,1,0,0,0,1109,171,1,0,0,0,1110,1108,1,0,0,
        0,1111,1112,5,98,0,0,1112,1113,3,182,91,0,1113,1114,3,150,75,0,1114,
        1118,1,0,0,0,1115,1116,5,99,0,0,1116,1118,3,150,75,0,1117,1111,1,
        0,0,0,1117,1115,1,0,0,0,1118,173,1,0,0,0,1119,1120,5,32,0,0,1120,
        1121,3,192,96,0,1121,1123,5,22,0,0,1122,1124,3,164,82,0,1123,1122,
        1,0,0,0,1123,1124,1,0,0,0,1124,1125,1,0,0,0,1125,1127,5,23,0,0,1126,
        1128,3,176,88,0,1127,1126,1,0,0,0,1127,1128,1,0,0,0,1128,1129,1,
        0,0,0,1129,1130,3,150,75,0,1130,175,1,0,0,0,1131,1132,5,100,0,0,
        1132,1133,3,164,82,0,1133,177,1,0,0,0,1134,1137,5,28,0,0,1135,1138,
        3,150,75,0,1136,1138,3,154,77,0,1137,1135,1,0,0,0,1137,1136,1,0,
        0,0,1138,1139,1,0,0,0,1139,1142,3,154,77,0,1140,1143,3,150,75,0,
        1141,1143,3,154,77,0,1142,1140,1,0,0,0,1142,1141,1,0,0,0,1143,1144,
        1,0,0,0,1144,1145,3,150,75,0,1145,179,1,0,0,0,1146,1147,5,50,0,0,
        1147,1148,3,154,77,0,1148,1149,3,150,75,0,1149,181,1,0,0,0,1150,
        1151,7,17,0,0,1151,183,1,0,0,0,1152,1153,5,53,0,0,1153,1154,3,192,
        96,0,1154,1155,3,150,75,0,1155,185,1,0,0,0,1156,1158,5,22,0,0,1157,
        1159,3,136,68,0,1158,1157,1,0,0,0,1158,1159,1,0,0,0,1159,1166,1,
        0,0,0,1160,1162,5,15,0,0,1161,1163,3,136,68,0,1162,1161,1,0,0,0,
        1162,1163,1,0,0,0,1163,1165,1,0,0,0,1164,1160,1,0,0,0,1165,1168,
        1,0,0,0,1166,1164,1,0,0,0,1166,1167,1,0,0,0,1167,1169,1,0,0,0,1168,
        1166,1,0,0,0,1169,1183,5,23,0,0,1170,1179,5,38,0,0,1171,1176,3,136,
        68,0,1172,1173,5,15,0,0,1173,1175,3,136,68,0,1174,1172,1,0,0,0,1175,
        1178,1,0,0,0,1176,1174,1,0,0,0,1176,1177,1,0,0,0,1177,1180,1,0,0,
        0,1178,1176,1,0,0,0,1179,1171,1,0,0,0,1179,1180,1,0,0,0,1180,1181,
        1,0,0,0,1181,1183,5,39,0,0,1182,1156,1,0,0,0,1182,1170,1,0,0,0,1183,
        187,1,0,0,0,1184,1187,3,134,67,0,1185,1187,3,74,37,0,1186,1184,1,
        0,0,0,1186,1185,1,0,0,0,1187,189,1,0,0,0,1188,1190,7,18,0,0,1189,
        1191,5,111,0,0,1190,1189,1,0,0,0,1190,1191,1,0,0,0,1191,191,1,0,
        0,0,1192,1202,7,19,0,0,1193,1198,5,130,0,0,1194,1195,5,13,0,0,1195,
        1197,5,130,0,0,1196,1194,1,0,0,0,1197,1200,1,0,0,0,1198,1196,1,0,
        0,0,1198,1199,1,0,0,0,1199,1202,1,0,0,0,1200,1198,1,0,0,0,1201,1192,
        1,0,0,0,1201,1193,1,0,0,0,1202,193,1,0,0,0,139,195,205,207,223,227,
        232,239,245,251,255,267,275,280,283,286,289,299,302,308,315,319,
        325,340,345,349,359,365,371,380,394,397,409,416,419,422,426,431,
        435,452,454,458,464,474,480,491,494,504,507,513,516,524,527,533,
        536,544,547,553,557,568,573,578,586,593,604,606,611,616,621,623,
        631,642,644,668,677,683,688,693,697,702,714,730,736,740,743,750,
        770,788,792,804,808,812,817,822,826,839,868,915,921,925,932,946,
        949,959,961,971,978,980,987,995,999,1007,1011,1013,1024,1046,1050,
        1056,1060,1066,1070,1076,1087,1094,1108,1117,1123,1127,1137,1142,
        1158,1162,1166,1176,1179,1182,1186,1190,1198,1201
    ]

class SolidityParser ( Parser ):

    grammarFileName = "Solidity.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "';'", "'^'", "'~'", "'>='", 
                     "'>'", "'<'", "'<='", "'='", "'as'", "'import'", "'*'", 
                     "'from'", "'{'", "','", "'}'", "'abstract'", "'contract'", 
                     "'interface'", "'library'", "'is'", "'('", "')'", "'({'", 
                     "':'", "'})'", "'using'", "'for'", "'struct'", "'constructor'", 
                     "'modifier'", "'function'", "'receive'", "'fallback'", 
                     "'returns'", "'event'", "'enum'", "'['", "']'", "'address'", 
                     "'.'", "'mapping'", "'=>'", "'memory'", "'storage'", 
                     "'calldata'", "'unchecked'", "'try'", "'catch'", "'if'", 
                     "'else'", "'while'", "'assembly'", "'do'", "'return'", 
                     "'throw'", "'emit'", "'var'", "'bool'", "'string'", 
                     "'byte'", "'++'", "'--'", "'!'", "'delete'", "'-'", 
                     "'new'", "'+'", "'after'", "'**'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'>>>'", "'&'", "'|'", "'=='", "'!='", "'&&'", 
                     "'||'", "'?'", "'|='", "'^='", "'&='", "'<<='", "'>>='", 
                     "'>>>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'let'", 
                     "':='", "'=:'", "'switch'", "'case'", "'default'", 
                     "'->'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'anonymous'", "'break'", "'constant'", 
                     "'override'", "'immutable'", "'virtual'", "'continue'", 
                     "'external'", "'indexed'", "'internal'", "'payable'", 
                     "'private'", "'public'", "'pure'", "'type'", "'view'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "LicenseIdentifier", "Int", "Uint", "Byte", 
                      "Fixed", "Ufixed", "VersionLiteral", "BooleanLiteral", 
                      "DecimalNumber", "HexNumber", "NumberUnit", "HexLiteral", 
                      "ReservedKeyword", "AnonymousKeyword", "BreakKeyword", 
                      "ConstantKeyword", "OverrideKeyword", "ImmutableKeyword", 
                      "VirtualKeyword", "ContinueKeyword", "ExternalKeyword", 
                      "IndexedKeyword", "InternalKeyword", "PayableKeyword", 
                      "PrivateKeyword", "PublicKeyword", "PureKeyword", 
                      "TypeKeyword", "ViewKeyword", "Identifier", "StringLiteral", 
                      "WS", "NatSpecSingleLine", "NatSpecMultiLine", "LINE_COMMENT", 
                      "COMMENT" ]

    RULE_sourceUnit = 0
    RULE_spdxLicenseIdentifier = 1
    RULE_pragmaDirective = 2
    RULE_pragmaName = 3
    RULE_pragmaValue = 4
    RULE_version = 5
    RULE_versionOperator = 6
    RULE_versionConstraint = 7
    RULE_importDeclaration = 8
    RULE_importDirective = 9
    RULE_natSpec = 10
    RULE_contractDefinition = 11
    RULE_inheritanceSpecifier = 12
    RULE_callArgumentList = 13
    RULE_contractPart = 14
    RULE_stateVariableDeclaration = 15
    RULE_usingForDeclaration = 16
    RULE_structDefinition = 17
    RULE_constructorDefinition = 18
    RULE_modifierDefinition = 19
    RULE_modifierInvocation = 20
    RULE_functionDefinition = 21
    RULE_returnParameters = 22
    RULE_overrideParameters = 23
    RULE_modifierList = 24
    RULE_eventDefinition = 25
    RULE_enumValue = 26
    RULE_enumDefinition = 27
    RULE_parameterList = 28
    RULE_objectList = 29
    RULE_parameter = 30
    RULE_eventParameterList = 31
    RULE_eventParameter = 32
    RULE_functionTypeParameterList = 33
    RULE_functionTypeParameter = 34
    RULE_variableDeclaration = 35
    RULE_typeName = 36
    RULE_userDefinedTypeName = 37
    RULE_mapping = 38
    RULE_functionTypeName = 39
    RULE_visibility = 40
    RULE_storageLocation = 41
    RULE_stateMutability = 42
    RULE_block = 43
    RULE_uncheckedBlock = 44
    RULE_statement = 45
    RULE_tryStatement = 46
    RULE_catchClause = 47
    RULE_expressionStatement = 48
    RULE_ifStatement = 49
    RULE_ifCondition = 50
    RULE_ifRight = 51
    RULE_ifWrong = 52
    RULE_whileStatement = 53
    RULE_simpleStatement = 54
    RULE_forStatement = 55
    RULE_inlineAssemblyStatement = 56
    RULE_doWhileStatement = 57
    RULE_continueStatement = 58
    RULE_breakStatement = 59
    RULE_returnStatement = 60
    RULE_throwStatement = 61
    RULE_emitStatement = 62
    RULE_variableDeclarationStatement = 63
    RULE_constantVariableDeclaration = 64
    RULE_variableDeclarationList = 65
    RULE_identifierList = 66
    RULE_elementaryTypeName = 67
    RULE_expression = 68
    RULE_primaryExpression = 69
    RULE_expressionList = 70
    RULE_nameValueList = 71
    RULE_nameValue = 72
    RULE_functionCallArguments = 73
    RULE_functionCall = 74
    RULE_assemblyBlock = 75
    RULE_assemblyItem = 76
    RULE_assemblyExpression = 77
    RULE_assemblyCall = 78
    RULE_assemblyLocalDefinition = 79
    RULE_assemblyAssignment = 80
    RULE_assemblyIdentifierOrList = 81
    RULE_assemblyIdentifierList = 82
    RULE_assemblyStackAssignment = 83
    RULE_labelDefinition = 84
    RULE_assemblySwitch = 85
    RULE_assemblyCase = 86
    RULE_assemblyFunctionDefinition = 87
    RULE_assemblyFunctionReturns = 88
    RULE_assemblyFor = 89
    RULE_assemblyIf = 90
    RULE_assemblyLiteral = 91
    RULE_subAssembly = 92
    RULE_tupleExpression = 93
    RULE_typeNameExpression = 94
    RULE_numberLiteral = 95
    RULE_identifier = 96

    ruleNames =  [ "sourceUnit", "spdxLicenseIdentifier", "pragmaDirective", 
                   "pragmaName", "pragmaValue", "version", "versionOperator", 
                   "versionConstraint", "importDeclaration", "importDirective", 
                   "natSpec", "contractDefinition", "inheritanceSpecifier", 
                   "callArgumentList", "contractPart", "stateVariableDeclaration", 
                   "usingForDeclaration", "structDefinition", "constructorDefinition", 
                   "modifierDefinition", "modifierInvocation", "functionDefinition", 
                   "returnParameters", "overrideParameters", "modifierList", 
                   "eventDefinition", "enumValue", "enumDefinition", "parameterList", 
                   "objectList", "parameter", "eventParameterList", "eventParameter", 
                   "functionTypeParameterList", "functionTypeParameter", 
                   "variableDeclaration", "typeName", "userDefinedTypeName", 
                   "mapping", "functionTypeName", "visibility", "storageLocation", 
                   "stateMutability", "block", "uncheckedBlock", "statement", 
                   "tryStatement", "catchClause", "expressionStatement", 
                   "ifStatement", "ifCondition", "ifRight", "ifWrong", "whileStatement", 
                   "simpleStatement", "forStatement", "inlineAssemblyStatement", 
                   "doWhileStatement", "continueStatement", "breakStatement", 
                   "returnStatement", "throwStatement", "emitStatement", 
                   "variableDeclarationStatement", "constantVariableDeclaration", 
                   "variableDeclarationList", "identifierList", "elementaryTypeName", 
                   "expression", "primaryExpression", "expressionList", 
                   "nameValueList", "nameValue", "functionCallArguments", 
                   "functionCall", "assemblyBlock", "assemblyItem", "assemblyExpression", 
                   "assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", 
                   "assemblyIdentifierOrList", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", 
                   "tupleExpression", "typeNameExpression", "numberLiteral", 
                   "identifier" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    LicenseIdentifier=101
    Int=102
    Uint=103
    Byte=104
    Fixed=105
    Ufixed=106
    VersionLiteral=107
    BooleanLiteral=108
    DecimalNumber=109
    HexNumber=110
    NumberUnit=111
    HexLiteral=112
    ReservedKeyword=113
    AnonymousKeyword=114
    BreakKeyword=115
    ConstantKeyword=116
    OverrideKeyword=117
    ImmutableKeyword=118
    VirtualKeyword=119
    ContinueKeyword=120
    ExternalKeyword=121
    IndexedKeyword=122
    InternalKeyword=123
    PayableKeyword=124
    PrivateKeyword=125
    PublicKeyword=126
    PureKeyword=127
    TypeKeyword=128
    ViewKeyword=129
    Identifier=130
    StringLiteral=131
    WS=132
    NatSpecSingleLine=133
    NatSpecMultiLine=134
    LINE_COMMENT=135
    COMMENT=136

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def spdxLicenseIdentifier(self):
            return self.getTypedRuleContext(SolidityParser.SpdxLicenseIdentifierContext,0)


        def natSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NatSpecContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NatSpecContext,i)


        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def functionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,i)


        def constantVariableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ConstantVariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ConstantVariableDeclarationContext,i)


        def structDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,i)


        def enumDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceUnit" ):
                return visitor.visitSourceUnit(self)
            else:
                return visitor.visitChildren(self)




    def sourceUnit(self):

        localctx = SolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 194
                self.spdxLicenseIdentifier()


            self.state = 207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 4323531676620564482) != 0 or (((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 6710886431) != 0:
                self.state = 205
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 197
                    self.natSpec()
                    pass

                elif la_ == 2:
                    self.state = 198
                    self.pragmaDirective()
                    pass

                elif la_ == 3:
                    self.state = 199
                    self.importDirective()
                    pass

                elif la_ == 4:
                    self.state = 200
                    self.contractDefinition()
                    pass

                elif la_ == 5:
                    self.state = 201
                    self.functionDefinition()
                    pass

                elif la_ == 6:
                    self.state = 202
                    self.constantVariableDeclaration()
                    pass

                elif la_ == 7:
                    self.state = 203
                    self.structDefinition()
                    pass

                elif la_ == 8:
                    self.state = 204
                    self.enumDefinition()
                    pass


                self.state = 209
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 210
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpdxLicenseIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LicenseIdentifier(self):
            return self.getToken(SolidityParser.LicenseIdentifier, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_spdxLicenseIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpdxLicenseIdentifier" ):
                listener.enterSpdxLicenseIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpdxLicenseIdentifier" ):
                listener.exitSpdxLicenseIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpdxLicenseIdentifier" ):
                return visitor.visitSpdxLicenseIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def spdxLicenseIdentifier(self):

        localctx = SolidityParser.SpdxLicenseIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_spdxLicenseIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self.match(SolidityParser.LicenseIdentifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(SolidityParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(SolidityParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaDirective" ):
                return visitor.visitPragmaDirective(self)
            else:
                return visitor.visitChildren(self)




    def pragmaDirective(self):

        localctx = SolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.match(SolidityParser.T__0)
            self.state = 215
            self.pragmaName()
            self.state = 216
            self.pragmaValue()
            self.state = 217
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaName" ):
                return visitor.visitPragmaName(self)
            else:
                return visitor.visitChildren(self)




    def pragmaName(self):

        localctx = SolidityParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(SolidityParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaValue" ):
                return visitor.visitPragmaValue(self)
            else:
                return visitor.visitChildren(self)




    def pragmaValue(self):

        localctx = SolidityParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_pragmaValue)
        try:
            self.state = 223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 221
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 222
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = SolidityParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.versionConstraint()
            self.state = 227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 1016) != 0 or _la==107:
                self.state = 226
                self.versionConstraint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionOperator" ):
                return visitor.visitVersionOperator(self)
            else:
                return visitor.visitChildren(self)




    def versionOperator(self):

        localctx = SolidityParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 1016) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(SolidityParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(SolidityParser.VersionOperatorContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionConstraint" ):
                return visitor.visitVersionConstraint(self)
            else:
                return visitor.visitChildren(self)




    def versionConstraint(self):

        localctx = SolidityParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 1016) != 0:
                self.state = 231
                self.versionOperator()


            self.state = 234
            self.match(SolidityParser.VersionLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDeclaration" ):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importDeclaration(self):

        localctx = SolidityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.identifier()
            self.state = 239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 237
                self.match(SolidityParser.T__9)
                self.state = 238
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(SolidityParser.StringLiteral, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDirective" ):
                return visitor.visitImportDirective(self)
            else:
                return visitor.visitChildren(self)




    def importDirective(self):

        localctx = SolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 241
                self.match(SolidityParser.T__10)
                self.state = 242
                self.match(SolidityParser.StringLiteral)
                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 243
                    self.match(SolidityParser.T__9)
                    self.state = 244
                    self.identifier()


                self.state = 247
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 248
                self.match(SolidityParser.T__10)
                self.state = 251
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [12]:
                    self.state = 249
                    self.match(SolidityParser.T__11)
                    pass
                elif token in [13, 46, 130]:
                    self.state = 250
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 253
                    self.match(SolidityParser.T__9)
                    self.state = 254
                    self.identifier()


                self.state = 257
                self.match(SolidityParser.T__12)
                self.state = 258
                self.match(SolidityParser.StringLiteral)
                self.state = 259
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 260
                self.match(SolidityParser.T__10)
                self.state = 261
                self.match(SolidityParser.T__13)
                self.state = 262
                self.importDeclaration()
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 263
                    self.match(SolidityParser.T__14)
                    self.state = 264
                    self.importDeclaration()
                    self.state = 269
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 270
                self.match(SolidityParser.T__15)
                self.state = 271
                self.match(SolidityParser.T__12)
                self.state = 272
                self.match(SolidityParser.StringLiteral)
                self.state = 273
                self.match(SolidityParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NatSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NatSpecSingleLine(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NatSpecSingleLine)
            else:
                return self.getToken(SolidityParser.NatSpecSingleLine, i)

        def NatSpecMultiLine(self):
            return self.getToken(SolidityParser.NatSpecMultiLine, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_natSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNatSpec" ):
                listener.enterNatSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNatSpec" ):
                listener.exitNatSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNatSpec" ):
                return visitor.visitNatSpec(self)
            else:
                return visitor.visitChildren(self)




    def natSpec(self):

        localctx = SolidityParser.NatSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_natSpec)
        try:
            self.state = 283
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [133]:
                self.enterOuterAlt(localctx, 1)
                self.state = 278 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 277
                        self.match(SolidityParser.NatSpecSingleLine)

                    else:
                        raise NoViableAltException(self)
                    self.state = 280 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 282
                self.match(SolidityParser.NatSpecMultiLine)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(SolidityParser.NatSpecContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractPartContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractDefinition" ):
                return visitor.visitContractDefinition(self)
            else:
                return visitor.visitChildren(self)




    def contractDefinition(self):

        localctx = SolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133 or _la==134:
                self.state = 285
                self.natSpec()


            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 288
                self.match(SolidityParser.T__16)


            self.state = 291
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 1835008) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 292
            self.identifier()
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 293
                self.match(SolidityParser.T__20)
                self.state = 294
                self.inheritanceSpecifier()
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 295
                    self.match(SolidityParser.T__14)
                    self.state = 296
                    self.inheritanceSpecifier()
                    self.state = 301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 304
            self.match(SolidityParser.T__13)
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 4323531748693516288) != 0 or (((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 6710886431) != 0:
                self.state = 305
                self.contractPart()
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 311
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInheritanceSpecifier" ):
                return visitor.visitInheritanceSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def inheritanceSpecifier(self):

        localctx = SolidityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.userDefinedTypeName()
            self.state = 315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22 or _la==24:
                self.state = 314
                self.callArgumentList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_callArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallArgumentList" ):
                listener.enterCallArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallArgumentList" ):
                listener.exitCallArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallArgumentList" ):
                return visitor.visitCallArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def callArgumentList(self):

        localctx = SolidityParser.CallArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_callArgumentList)
        self._la = 0 # Token type
        try:
            self.state = 349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 317
                self.match(SolidityParser.T__21)
                self.state = 319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -18009914563362303) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3386681098439229437) != 0:
                    self.state = 318
                    self.expression(0)


                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 321
                    self.match(SolidityParser.T__14)
                    self.state = 322
                    self.expression(0)
                    self.state = 327
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 328
                self.match(SolidityParser.T__22)
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 329
                self.match(SolidityParser.T__23)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==13 or _la==46 or _la==130:
                    self.state = 330
                    self.identifier()
                    self.state = 331
                    self.match(SolidityParser.T__24)
                    self.state = 332
                    self.expression(0)
                    self.state = 340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 333
                        self.match(SolidityParser.T__14)
                        self.state = 334
                        self.identifier()
                        self.state = 335
                        self.match(SolidityParser.T__24)
                        self.state = 336
                        self.expression(0)
                        self.state = 342
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 348
                self.match(SolidityParser.T__25)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def constructorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ConstructorDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractPart" ):
                return visitor.visitContractPart(self)
            else:
                return visitor.visitChildren(self)




    def contractPart(self):

        localctx = SolidityParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_contractPart)
        try:
            self.state = 359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 351
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 352
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 353
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 354
                self.constructorDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 355
                self.modifierDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 356
                self.functionDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 357
                self.eventDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 358
                self.enumDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ConstantKeyword)
            else:
                return self.getToken(SolidityParser.ConstantKeyword, i)

        def OverrideKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.OverrideKeyword)
            else:
                return self.getToken(SolidityParser.OverrideKeyword, i)

        def ImmutableKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ImmutableKeyword)
            else:
                return self.getToken(SolidityParser.ImmutableKeyword, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateVariableDeclaration" ):
                return visitor.visitStateVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def stateVariableDeclaration(self):

        localctx = SolidityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.typeName(0)
            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 1671) != 0:
                self.state = 362
                _la = self._input.LA(1)
                if not((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 1671) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 368
            self.identifier()
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 369
                self.match(SolidityParser.T__8)
                self.state = 370
                self.expression(0)


            self.state = 373
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingForDeclaration" ):
                return visitor.visitUsingForDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def usingForDeclaration(self):

        localctx = SolidityParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_usingForDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(SolidityParser.T__26)
            self.state = 376
            self.identifier()
            self.state = 377
            self.match(SolidityParser.T__27)
            self.state = 380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.state = 378
                self.match(SolidityParser.T__11)
                pass
            elif token in [13, 32, 40, 42, 46, 58, 59, 60, 61, 102, 103, 104, 105, 106, 130]:
                self.state = 379
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 382
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDefinition" ):
                return visitor.visitStructDefinition(self)
            else:
                return visitor.visitChildren(self)




    def structDefinition(self):

        localctx = SolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(SolidityParser.T__28)
            self.state = 385
            self.identifier()
            self.state = 386
            self.match(SolidityParser.T__13)
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 4323531512872968192) != 0 or (((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 268435487) != 0:
                self.state = 387
                self.variableDeclaration()
                self.state = 388
                self.match(SolidityParser.T__1)
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3f) == 0 and ((1 << _la) & 4323531512872968192) != 0 or (((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 268435487) != 0:
                    self.state = 389
                    self.variableDeclaration()
                    self.state = 390
                    self.match(SolidityParser.T__1)
                    self.state = 396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 399
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_constructorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDefinition" ):
                listener.enterConstructorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDefinition" ):
                listener.exitConstructorDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorDefinition" ):
                return visitor.visitConstructorDefinition(self)
            else:
                return visitor.visitChildren(self)




    def constructorDefinition(self):

        localctx = SolidityParser.ConstructorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_constructorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(SolidityParser.T__29)
            self.state = 402
            self.parameterList()
            self.state = 403
            self.modifierList()
            self.state = 404
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierDefinition" ):
                return visitor.visitModifierDefinition(self)
            else:
                return visitor.visitChildren(self)




    def modifierDefinition(self):

        localctx = SolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(SolidityParser.T__30)
            self.state = 407
            self.identifier()
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 408
                self.parameterList()


            self.state = 411
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierInvocation" ):
                return visitor.visitModifierInvocation(self)
            else:
                return visitor.visitChildren(self)




    def modifierInvocation(self):

        localctx = SolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.identifier()
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 414
                self.match(SolidityParser.T__21)
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -18009914563362303) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3386681098439229437) != 0:
                    self.state = 415
                    self.expressionList()


                self.state = 418
                self.match(SolidityParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(SolidityParser.NatSpecContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = SolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133 or _la==134:
                self.state = 421
                self.natSpec()


            self.state = 424
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 30064771072) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==46 or _la==130:
                self.state = 425
                self.identifier()


            self.state = 428
            self.parameterList()
            self.state = 429
            self.modifierList()
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 430
                self.returnParameters()


            self.state = 435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 433
                self.match(SolidityParser.T__1)
                pass
            elif token in [14]:
                self.state = 434
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnParameters" ):
                return visitor.visitReturnParameters(self)
            else:
                return visitor.visitChildren(self)




    def returnParameters(self):

        localctx = SolidityParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_returnParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(SolidityParser.T__34)
            self.state = 438
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverrideParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OverrideKeyword(self):
            return self.getToken(SolidityParser.OverrideKeyword, 0)

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_overrideParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverrideParameters" ):
                listener.enterOverrideParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverrideParameters" ):
                listener.exitOverrideParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverrideParameters" ):
                return visitor.visitOverrideParameters(self)
            else:
                return visitor.visitChildren(self)




    def overrideParameters(self):

        localctx = SolidityParser.OverrideParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_overrideParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.match(SolidityParser.OverrideKeyword)
            self.state = 441
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def OverrideKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.OverrideKeyword)
            else:
                return self.getToken(SolidityParser.OverrideKeyword, i)

        def overrideParameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideParametersContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideParametersContext,i)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierList" ):
                return visitor.visitModifierList(self)
            else:
                return visitor.visitChildren(self)




    def modifierList(self):

        localctx = SolidityParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_modifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13 or _la==46 or (((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 28587) != 0:
                self.state = 452
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 443
                    self.modifierInvocation()
                    pass

                elif la_ == 2:
                    self.state = 444
                    self.stateMutability()
                    pass

                elif la_ == 3:
                    self.state = 445
                    self.match(SolidityParser.ExternalKeyword)
                    pass

                elif la_ == 4:
                    self.state = 446
                    self.match(SolidityParser.PublicKeyword)
                    pass

                elif la_ == 5:
                    self.state = 447
                    self.match(SolidityParser.InternalKeyword)
                    pass

                elif la_ == 6:
                    self.state = 448
                    self.match(SolidityParser.PrivateKeyword)
                    pass

                elif la_ == 7:
                    self.state = 449
                    self.match(SolidityParser.OverrideKeyword)
                    pass

                elif la_ == 8:
                    self.state = 450
                    self.overrideParameters()
                    pass

                elif la_ == 9:
                    self.state = 451
                    self.match(SolidityParser.VirtualKeyword)
                    pass


                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(SolidityParser.EventParameterListContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(SolidityParser.NatSpecContext,0)


        def AnonymousKeyword(self):
            return self.getToken(SolidityParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventDefinition" ):
                return visitor.visitEventDefinition(self)
            else:
                return visitor.visitChildren(self)




    def eventDefinition(self):

        localctx = SolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133 or _la==134:
                self.state = 457
                self.natSpec()


            self.state = 460
            self.match(SolidityParser.T__35)
            self.state = 461
            self.identifier()
            self.state = 462
            self.eventParameterList()
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 463
                self.match(SolidityParser.AnonymousKeyword)


            self.state = 466
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = SolidityParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDefinition" ):
                return visitor.visitEnumDefinition(self)
            else:
                return visitor.visitChildren(self)




    def enumDefinition(self):

        localctx = SolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(SolidityParser.T__36)
            self.state = 471
            self.identifier()
            self.state = 472
            self.match(SolidityParser.T__13)
            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==46 or _la==130:
                self.state = 473
                self.enumValue()


            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 476
                self.match(SolidityParser.T__14)
                self.state = 477
                self.enumValue()
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 483
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = SolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(SolidityParser.T__21)
            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 4323531512872968192) != 0 or (((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 268435487) != 0:
                self.state = 486
                self.parameter()
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 487
                    self.match(SolidityParser.T__14)
                    self.state = 488
                    self.parameter()
                    self.state = 493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 496
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_objectList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectList" ):
                listener.enterObjectList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectList" ):
                listener.exitObjectList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectList" ):
                return visitor.visitObjectList(self)
            else:
                return visitor.visitChildren(self)




    def objectList(self):

        localctx = SolidityParser.ObjectListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_objectList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(SolidityParser.T__21)
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 4323531512872968192) != 0 or (((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 268435487) != 0:
                self.state = 499
                self.parameter()
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 500
                    self.match(SolidityParser.T__14)
                    self.state = 501
                    self.parameter()
                    self.state = 506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 509
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = SolidityParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.typeName(0)
            self.state = 513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 512
                self.storageLocation()


            self.state = 516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==46 or _la==130:
                self.state = 515
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameterList" ):
                return visitor.visitEventParameterList(self)
            else:
                return visitor.visitChildren(self)




    def eventParameterList(self):

        localctx = SolidityParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.match(SolidityParser.T__21)
            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 4323531512872968192) != 0 or (((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 268435487) != 0:
                self.state = 519
                self.eventParameter()
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 520
                    self.match(SolidityParser.T__14)
                    self.state = 521
                    self.eventParameter()
                    self.state = 526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 529
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(SolidityParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameter" ):
                return visitor.visitEventParameter(self)
            else:
                return visitor.visitChildren(self)




    def eventParameter(self):

        localctx = SolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.typeName(0)
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 532
                self.match(SolidityParser.IndexedKeyword)


            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==46 or _la==130:
                self.state = 535
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameterList" ):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameterList" ):
                listener.exitFunctionTypeParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeParameterList" ):
                return visitor.visitFunctionTypeParameterList(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeParameterList(self):

        localctx = SolidityParser.FunctionTypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_functionTypeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.match(SolidityParser.T__21)
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 4323531512872968192) != 0 or (((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 268435487) != 0:
                self.state = 539
                self.functionTypeParameter()
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 540
                    self.match(SolidityParser.T__14)
                    self.state = 541
                    self.functionTypeParameter()
                    self.state = 546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 549
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameter" ):
                listener.enterFunctionTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameter" ):
                listener.exitFunctionTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeParameter" ):
                return visitor.visitFunctionTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeParameter(self):

        localctx = SolidityParser.FunctionTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_functionTypeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.typeName(0)
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 123145302310912) != 0:
                self.state = 552
                self.storageLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaration" ):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaration(self):

        localctx = SolidityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.typeName(0)
            self.state = 557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 556
                self.storageLocation()


            self.state = 559
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(SolidityParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityParser.FunctionTypeNameContext,0)


        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 72
        self.enterRecursionRule(localctx, 72, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 562
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 563
                self.userDefinedTypeName()
                pass

            elif la_ == 3:
                self.state = 564
                self.mapping()
                pass

            elif la_ == 4:
                self.state = 565
                self.functionTypeName()
                pass

            elif la_ == 5:
                self.state = 566
                self.match(SolidityParser.T__39)
                self.state = 567
                self.match(SolidityParser.PayableKeyword)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 578
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SolidityParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 570
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 571
                    self.match(SolidityParser.T__37)
                    self.state = 573
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -18009914563362303) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3386681098439229437) != 0:
                        self.state = 572
                        self.expression(0)


                    self.state = 575
                    self.match(SolidityParser.T__38) 
                self.state = 580
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UserDefinedTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinedTypeName" ):
                return visitor.visitUserDefinedTypeName(self)
            else:
                return visitor.visitChildren(self)




    def userDefinedTypeName(self):

        localctx = SolidityParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.identifier()
            self.state = 586
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 582
                    self.match(SolidityParser.T__40)
                    self.state = 583
                    self.identifier() 
                self.state = 588
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping" ):
                return visitor.visitMapping(self)
            else:
                return visitor.visitChildren(self)




    def mapping(self):

        localctx = SolidityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(SolidityParser.T__41)
            self.state = 590
            self.match(SolidityParser.T__21)
            self.state = 593
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40, 58, 59, 60, 61, 102, 103, 104, 105, 106]:
                self.state = 591
                self.elementaryTypeName()
                pass
            elif token in [13, 46, 130]:
                self.state = 592
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 595
            self.match(SolidityParser.T__42)
            self.state = 596
            self.typeName(0)
            self.state = 597
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterListContext,i)


        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def parameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterListContext,i)


        def visibility(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VisibilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VisibilityContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeName" ):
                return visitor.visitFunctionTypeName(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeName(self):

        localctx = SolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_functionTypeName)
        self._la = 0 # Token type
        try:
            self.state = 631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 599
                self.match(SolidityParser.T__31)
                self.state = 600
                self.functionTypeParameterList()
                self.state = 606
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 604
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [123]:
                            self.state = 601
                            self.match(SolidityParser.InternalKeyword)
                            pass
                        elif token in [121]:
                            self.state = 602
                            self.match(SolidityParser.ExternalKeyword)
                            pass
                        elif token in [116, 124, 127, 129]:
                            self.state = 603
                            self.stateMutability()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 608
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

                self.state = 611
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 609
                    self.match(SolidityParser.T__34)
                    self.state = 610
                    self.functionTypeParameterList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.match(SolidityParser.T__31)
                self.state = 614
                self.match(SolidityParser.T__21)
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 615
                    self.parameterList()


                self.state = 618
                self.match(SolidityParser.T__22)
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 12193) != 0:
                    self.state = 621
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [121, 123, 125, 126]:
                        self.state = 619
                        self.visibility()
                        pass
                    elif token in [116, 124, 127, 129]:
                        self.state = 620
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 625
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 626
                self.match(SolidityParser.T__34)
                self.state = 627
                self.match(SolidityParser.T__21)
                self.state = 628
                self.parameterList()
                self.state = 629
                self.match(SolidityParser.T__22)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def InternalKeyword(self):
            return self.getToken(SolidityParser.InternalKeyword, 0)

        def ExternalKeyword(self):
            return self.getToken(SolidityParser.ExternalKeyword, 0)

        def PrivateKeyword(self):
            return self.getToken(SolidityParser.PrivateKeyword, 0)

        def PublicKeyword(self):
            return self.getToken(SolidityParser.PublicKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = SolidityParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            _la = self._input.LA(1)
            if not((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & 53) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageLocation" ):
                return visitor.visitStorageLocation(self)
            else:
                return visitor.visitChildren(self)




    def storageLocation(self):

        localctx = SolidityParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 123145302310912) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(SolidityParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateMutability" ):
                return visitor.visitStateMutability(self)
            else:
                return visitor.visitChildren(self)




    def stateMutability(self):

        localctx = SolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            _la = self._input.LA(1)
            if not((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 10497) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def uncheckedBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UncheckedBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UncheckedBlockContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = SolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(SolidityParser.T__13)
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & -2316391554195440) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1227644039952597055) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 397) != 0:
                self.state = 642
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [4, 13, 14, 22, 28, 32, 38, 40, 42, 46, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 102, 103, 104, 105, 106, 108, 109, 110, 112, 115, 120, 124, 128, 130, 131, 135, 136]:
                    self.state = 640
                    self.statement()
                    pass
                elif token in [47]:
                    self.state = 641
                    self.uncheckedBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 647
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UncheckedBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_uncheckedBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedBlock" ):
                listener.enterUncheckedBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedBlock" ):
                listener.exitUncheckedBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUncheckedBlock" ):
                return visitor.visitUncheckedBlock(self)
            else:
                return visitor.visitChildren(self)




    def uncheckedBlock(self):

        localctx = SolidityParser.UncheckedBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_uncheckedBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(SolidityParser.T__46)
            self.state = 650
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(SolidityParser.IfStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SolidityParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SolidityParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(SolidityParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(SolidityParser.TryStatementContext,0)


        def catchClause(self):
            return self.getTypedRuleContext(SolidityParser.CatchClauseContext,0)


        def LINE_COMMENT(self):
            return self.getToken(SolidityParser.LINE_COMMENT, 0)

        def COMMENT(self):
            return self.getToken(SolidityParser.COMMENT, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = SolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_statement)
        try:
            self.state = 668
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self.ifStatement()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 653
                self.whileStatement()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 3)
                self.state = 654
                self.forStatement()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 655
                self.block()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 5)
                self.state = 656
                self.inlineAssemblyStatement()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 6)
                self.state = 657
                self.doWhileStatement()
                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 7)
                self.state = 658
                self.continueStatement()
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 8)
                self.state = 659
                self.breakStatement()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 9)
                self.state = 660
                self.returnStatement()
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 10)
                self.state = 661
                self.throwStatement()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 11)
                self.state = 662
                self.emitStatement()
                pass
            elif token in [4, 13, 22, 32, 38, 40, 42, 46, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 102, 103, 104, 105, 106, 108, 109, 110, 112, 124, 128, 130, 131]:
                self.enterOuterAlt(localctx, 12)
                self.state = 663
                self.simpleStatement()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 13)
                self.state = 664
                self.tryStatement()
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 14)
                self.state = 665
                self.catchClause()
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 15)
                self.state = 666
                self.match(SolidityParser.LINE_COMMENT)
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 16)
                self.state = 667
                self.match(SolidityParser.COMMENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = SolidityParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(SolidityParser.T__47)
            self.state = 671
            self.expression(0)
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 672
                self.match(SolidityParser.T__34)
                self.state = 673
                self.match(SolidityParser.T__21)
                self.state = 674
                self.parameterList()
                self.state = 675
                self.match(SolidityParser.T__22)


            self.state = 679
            self.block()
            self.state = 683
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 680
                    self.catchClause() 
                self.state = 685
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(SolidityParser.NatSpecContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = SolidityParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.state = 702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 686
                self.match(SolidityParser.T__48)
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 70368748380160) != 0 or _la==130:
                    self.state = 688
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13 or _la==46 or _la==130:
                        self.state = 687
                        self.identifier()


                    self.state = 690
                    self.match(SolidityParser.T__21)
                    self.state = 691
                    self.parameterList()
                    self.state = 693
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==133 or _la==134:
                        self.state = 692
                        self.natSpec()


                    self.state = 695
                    self.match(SolidityParser.T__22)


                self.state = 699
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 700
                self.match(SolidityParser.T__48)
                self.state = 701
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = SolidityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.expression(0)
            self.state = 705
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifCondition(self):
            return self.getTypedRuleContext(SolidityParser.IfConditionContext,0)


        def ifRight(self):
            return self.getTypedRuleContext(SolidityParser.IfRightContext,0)


        def ifWrong(self):
            return self.getTypedRuleContext(SolidityParser.IfWrongContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = SolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(SolidityParser.T__49)
            self.state = 708
            self.match(SolidityParser.T__21)
            self.state = 709
            self.ifCondition()
            self.state = 710
            self.match(SolidityParser.T__22)
            self.state = 711
            self.ifRight()
            self.state = 714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 712
                self.match(SolidityParser.T__50)
                self.state = 713
                self.ifWrong()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_ifCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfCondition" ):
                listener.enterIfCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfCondition" ):
                listener.exitIfCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfCondition" ):
                return visitor.visitIfCondition(self)
            else:
                return visitor.visitChildren(self)




    def ifCondition(self):

        localctx = SolidityParser.IfConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_ifCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_ifRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfRight" ):
                listener.enterIfRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfRight" ):
                listener.exitIfRight(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfRight" ):
                return visitor.visitIfRight(self)
            else:
                return visitor.visitChildren(self)




    def ifRight(self):

        localctx = SolidityParser.IfRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_ifRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfWrongContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_ifWrong

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfWrong" ):
                listener.enterIfWrong(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfWrong" ):
                listener.exitIfWrong(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfWrong" ):
                return visitor.visitIfWrong(self)
            else:
                return visitor.visitChildren(self)




    def ifWrong(self):

        localctx = SolidityParser.IfWrongContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_ifWrong)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = SolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(SolidityParser.T__51)
            self.state = 723
            self.match(SolidityParser.T__21)
            self.state = 724
            self.expression(0)
            self.state = 725
            self.match(SolidityParser.T__22)
            self.state = 726
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleStatement" ):
                return visitor.visitSimpleStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleStatement(self):

        localctx = SolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 728
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 729
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = SolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(SolidityParser.T__27)
            self.state = 733
            self.match(SolidityParser.T__21)
            self.state = 736
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 13, 22, 32, 38, 40, 42, 46, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 102, 103, 104, 105, 106, 108, 109, 110, 112, 124, 128, 130, 131]:
                self.state = 734
                self.simpleStatement()
                pass
            elif token in [2]:
                self.state = 735
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 740
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 13, 22, 38, 40, 46, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 102, 103, 104, 105, 106, 108, 109, 110, 112, 124, 128, 130, 131]:
                self.state = 738
                self.expressionStatement()
                pass
            elif token in [2]:
                self.state = 739
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -18009914563362303) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3386681098439229437) != 0:
                self.state = 742
                self.expression(0)


            self.state = 745
            self.match(SolidityParser.T__22)
            self.state = 746
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def StringLiteral(self):
            return self.getToken(SolidityParser.StringLiteral, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineAssemblyStatement" ):
                return visitor.visitInlineAssemblyStatement(self)
            else:
                return visitor.visitChildren(self)




    def inlineAssemblyStatement(self):

        localctx = SolidityParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(SolidityParser.T__52)
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 749
                self.match(SolidityParser.StringLiteral)


            self.state = 752
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileStatement" ):
                return visitor.visitDoWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def doWhileStatement(self):

        localctx = SolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(SolidityParser.T__53)
            self.state = 755
            self.statement()
            self.state = 756
            self.match(SolidityParser.T__51)
            self.state = 757
            self.match(SolidityParser.T__21)
            self.state = 758
            self.expression(0)
            self.state = 759
            self.match(SolidityParser.T__22)
            self.state = 760
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = SolidityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(SolidityParser.ContinueKeyword)
            self.state = 763
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = SolidityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(SolidityParser.BreakKeyword)
            self.state = 766
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = SolidityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(SolidityParser.T__54)
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -18009914563362303) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3386681098439229437) != 0:
                self.state = 769
                self.expression(0)


            self.state = 772
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowStatement" ):
                return visitor.visitThrowStatement(self)
            else:
                return visitor.visitChildren(self)




    def throwStatement(self):

        localctx = SolidityParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.match(SolidityParser.T__55)
            self.state = 775
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmitStatement" ):
                return visitor.visitEmitStatement(self)
            else:
                return visitor.visitChildren(self)




    def emitStatement(self):

        localctx = SolidityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.match(SolidityParser.T__56)
            self.state = 778
            self.functionCall()
            self.state = 779
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationListContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationStatement" ):
                return visitor.visitVariableDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationStatement(self):

        localctx = SolidityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 781
                self.match(SolidityParser.T__57)
                self.state = 782
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 783
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 784
                self.match(SolidityParser.T__21)
                self.state = 785
                self.variableDeclarationList()
                self.state = 786
                self.match(SolidityParser.T__22)
                pass


            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 790
                self.match(SolidityParser.T__8)
                self.state = 791
                self.expression(0)


            self.state = 794
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_constantVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantVariableDeclaration" ):
                listener.enterConstantVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantVariableDeclaration" ):
                listener.exitConstantVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantVariableDeclaration" ):
                return visitor.visitConstantVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constantVariableDeclaration(self):

        localctx = SolidityParser.ConstantVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_constantVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.typeName(0)
            self.state = 797
            self.match(SolidityParser.ConstantKeyword)
            self.state = 798
            self.identifier()
            self.state = 799
            self.match(SolidityParser.T__8)
            self.state = 800
            self.expression(0)
            self.state = 801
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationList" ):
                return visitor.visitVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationList(self):

        localctx = SolidityParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 4323531512872968192) != 0 or (((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 268435487) != 0:
                self.state = 803
                self.variableDeclaration()


            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 806
                self.match(SolidityParser.T__14)
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 4323531512872968192) != 0 or (((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 268435487) != 0:
                    self.state = 807
                    self.variableDeclaration()


                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = SolidityParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(SolidityParser.T__21)
            self.state = 822
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 817
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13 or _la==46 or _la==130:
                        self.state = 816
                        self.identifier()


                    self.state = 819
                    self.match(SolidityParser.T__14) 
                self.state = 824
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==46 or _la==130:
                self.state = 825
                self.identifier()


            self.state = 828
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(SolidityParser.Int, 0)

        def Uint(self):
            return self.getToken(SolidityParser.Uint, 0)

        def Byte(self):
            return self.getToken(SolidityParser.Byte, 0)

        def Fixed(self):
            return self.getToken(SolidityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(SolidityParser.Ufixed, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementaryTypeName" ):
                return visitor.visitElementaryTypeName(self)
            else:
                return visitor.visitChildren(self)




    def elementaryTypeName(self):

        localctx = SolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 4323456741787303936) != 0 or (((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 31) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(SolidityParser.PrimaryExpressionContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 136
        self.enterRecursionRule(localctx, 136, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 833
                self.match(SolidityParser.T__37)
                self.state = 834
                self.expression(0)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 835
                    self.match(SolidityParser.T__14)
                    self.state = 836
                    self.expression(0)
                    self.state = 841
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 842
                self.match(SolidityParser.T__38)
                pass

            elif la_ == 2:
                self.state = 844
                self.match(SolidityParser.PayableKeyword)
                self.state = 845
                self.callArgumentList()
                pass

            elif la_ == 3:
                self.state = 846
                self.match(SolidityParser.TypeKeyword)
                self.state = 847
                self.match(SolidityParser.T__21)
                self.state = 848
                self.typeName(0)
                self.state = 849
                self.match(SolidityParser.T__22)
                pass

            elif la_ == 4:
                self.state = 851
                _la = self._input.LA(1)
                if not((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & 8935141660703064065) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 852
                self.expression(23)
                pass

            elif la_ == 5:
                self.state = 853
                self.match(SolidityParser.T__66)
                self.state = 854
                self.typeName(0)
                pass

            elif la_ == 6:
                self.state = 855
                self.match(SolidityParser.T__21)
                self.state = 856
                self.expression(0)
                self.state = 857
                self.match(SolidityParser.T__22)
                pass

            elif la_ == 7:
                self.state = 859
                _la = self._input.LA(1)
                if not(_la==66 or _la==68):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 860
                self.expression(18)
                pass

            elif la_ == 8:
                self.state = 861
                _la = self._input.LA(1)
                if not(_la==65 or _la==69):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 862
                self.expression(17)
                pass

            elif la_ == 9:
                self.state = 863
                self.match(SolidityParser.T__63)
                self.state = 864
                self.expression(16)
                pass

            elif la_ == 10:
                self.state = 865
                self.match(SolidityParser.T__3)
                self.state = 866
                self.expression(15)
                pass

            elif la_ == 11:
                self.state = 867
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 961
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 959
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                    if la_ == 1:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 870
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 871
                        self.match(SolidityParser.T__69)
                        self.state = 872
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 873
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 874
                        _la = self._input.LA(1)
                        if not((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & 1729382256910270465) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 875
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 876
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 877
                        _la = self._input.LA(1)
                        if not(_la==66 or _la==68):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 878
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 879
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 880
                        _la = self._input.LA(1)
                        if not((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 7) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 881
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 882
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 883
                        self.match(SolidityParser.T__75)
                        self.state = 884
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 885
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 886
                        self.match(SolidityParser.T__2)
                        self.state = 887
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 888
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 889
                        self.match(SolidityParser.T__76)
                        self.state = 890
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 891
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 892
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 480) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 893
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 894
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 895
                        _la = self._input.LA(1)
                        if not(_la==78 or _la==79):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 896
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 897
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 898
                        self.match(SolidityParser.T__79)
                        self.state = 899
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 900
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 901
                        self.match(SolidityParser.T__80)
                        self.state = 902
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 903
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 904
                        self.match(SolidityParser.T__81)
                        self.state = 905
                        self.expression(0)
                        self.state = 906
                        self.match(SolidityParser.T__24)
                        self.state = 907
                        self.expression(4)
                        pass

                    elif la_ == 13:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 909
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 910
                        _la = self._input.LA(1)
                        if not(_la==9 or (((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 2047) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 911
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 912
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 913
                        self.match(SolidityParser.T__37)
                        self.state = 915
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -18009914563362303) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3386681098439229437) != 0:
                            self.state = 914
                            self.expression(0)


                        self.state = 917
                        self.match(SolidityParser.T__38)
                        pass

                    elif la_ == 15:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 918
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 919
                        self.match(SolidityParser.T__37)
                        self.state = 921
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -18009914563362303) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3386681098439229437) != 0:
                            self.state = 920
                            self.expression(0)


                        self.state = 923
                        self.match(SolidityParser.T__24)
                        self.state = 925
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -18009914563362303) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3386681098439229437) != 0:
                            self.state = 924
                            self.expression(0)


                        self.state = 927
                        self.match(SolidityParser.T__38)
                        pass

                    elif la_ == 16:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 928
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 929
                        self.match(SolidityParser.T__40)
                        self.state = 932
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [13, 46, 130]:
                            self.state = 930
                            self.identifier()
                            pass
                        elif token in [40]:
                            self.state = 931
                            self.match(SolidityParser.T__39)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 17:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 934
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 935
                        self.match(SolidityParser.T__13)
                        self.state = 949
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==13 or _la==46 or _la==130:
                            self.state = 936
                            self.identifier()
                            self.state = 937
                            self.match(SolidityParser.T__24)
                            self.state = 938
                            self.expression(0)
                            self.state = 946
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==15:
                                self.state = 939
                                self.match(SolidityParser.T__14)
                                self.state = 940
                                self.identifier()
                                self.state = 941
                                self.match(SolidityParser.T__24)
                                self.state = 942
                                self.expression(0)
                                self.state = 948
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)



                        self.state = 951
                        self.match(SolidityParser.T__15)
                        pass

                    elif la_ == 18:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 952
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 953
                        _la = self._input.LA(1)
                        if not(_la==62 or _la==63):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 19:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 954
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 955
                        self.match(SolidityParser.T__21)
                        self.state = 956
                        self.functionCallArguments()
                        self.state = 957
                        self.match(SolidityParser.T__22)
                        pass

             
                self.state = 963
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def HexLiteral(self):
            return self.getToken(SolidityParser.HexLiteral, 0)

        def StringLiteral(self):
            return self.getToken(SolidityParser.StringLiteral, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityParser.TupleExpressionContext,0)


        def typeNameExpression(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = SolidityParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_primaryExpression)
        try:
            self.state = 980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 964
                self.match(SolidityParser.BooleanLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 965
                self.numberLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 966
                self.match(SolidityParser.HexLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 967
                self.match(SolidityParser.StringLiteral)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 968
                self.identifier()
                self.state = 971
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 969
                    self.match(SolidityParser.T__37)
                    self.state = 970
                    self.match(SolidityParser.T__38)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 973
                self.match(SolidityParser.TypeKeyword)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 974
                self.tupleExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 975
                self.typeNameExpression()
                self.state = 978
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 976
                    self.match(SolidityParser.T__37)
                    self.state = 977
                    self.match(SolidityParser.T__38)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = SolidityParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.expression(0)
            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 983
                self.match(SolidityParser.T__14)
                self.state = 984
                self.expression(0)
                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NameValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NameValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameValueList" ):
                return visitor.visitNameValueList(self)
            else:
                return visitor.visitChildren(self)




    def nameValueList(self):

        localctx = SolidityParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.nameValue()
            self.state = 995
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 991
                    self.match(SolidityParser.T__14)
                    self.state = 992
                    self.nameValue() 
                self.state = 997
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

            self.state = 999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 998
                self.match(SolidityParser.T__14)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameValue" ):
                return visitor.visitNameValue(self)
            else:
                return visitor.visitChildren(self)




    def nameValue(self):

        localctx = SolidityParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_nameValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.identifier()
            self.state = 1002
            self.match(SolidityParser.T__24)
            self.state = 1003
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallArguments" ):
                return visitor.visitFunctionCallArguments(self)
            else:
                return visitor.visitChildren(self)




    def functionCallArguments(self):

        localctx = SolidityParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 1013
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1005
                self.match(SolidityParser.T__13)
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==46 or _la==130:
                    self.state = 1006
                    self.nameValueList()


                self.state = 1009
                self.match(SolidityParser.T__15)
                pass
            elif token in [4, 13, 22, 23, 38, 40, 46, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 102, 103, 104, 105, 106, 108, 109, 110, 112, 124, 128, 130, 131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -18009914563362303) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3386681098439229437) != 0:
                    self.state = 1010
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = SolidityParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.expression(0)
            self.state = 1016
            self.match(SolidityParser.T__21)
            self.state = 1017
            self.functionCallArguments()
            self.state = 1018
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyBlock" ):
                return visitor.visitAssemblyBlock(self)
            else:
                return visitor.visitChildren(self)




    def assemblyBlock(self):

        localctx = SolidityParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(SolidityParser.T__13)
            self.state = 1024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 2352076378217668608) != 0 or (((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 206227996685) != 0:
                self.state = 1021
                self.assemblyItem()
                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1027
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(SolidityParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(SolidityParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def subAssembly(self):
            return self.getTypedRuleContext(SolidityParser.SubAssemblyContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(SolidityParser.StringLiteral, 0)

        def HexLiteral(self):
            return self.getToken(SolidityParser.HexLiteral, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyItem" ):
                return visitor.visitAssemblyItem(self)
            else:
                return visitor.visitChildren(self)




    def assemblyItem(self):

        localctx = SolidityParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_assemblyItem)
        try:
            self.state = 1046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1029
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1030
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1031
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1032
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1033
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1034
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1035
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1036
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1037
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1038
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1039
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1040
                self.match(SolidityParser.BreakKeyword)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1041
                self.match(SolidityParser.ContinueKeyword)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1042
                self.subAssembly()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1043
                self.numberLiteral()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1044
                self.match(SolidityParser.StringLiteral)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1045
                self.match(SolidityParser.HexLiteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyExpression" ):
                return visitor.visitAssemblyExpression(self)
            else:
                return visitor.visitChildren(self)




    def assemblyExpression(self):

        localctx = SolidityParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyExpression)
        try:
            self.state = 1050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 40, 46, 55, 61, 130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.assemblyCall()
                pass
            elif token in [109, 110, 112, 131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1049
                self.assemblyLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyCall" ):
                return visitor.visitAssemblyCall(self)
            else:
                return visitor.visitChildren(self)




    def assemblyCall(self):

        localctx = SolidityParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55]:
                self.state = 1052
                self.match(SolidityParser.T__54)
                pass
            elif token in [40]:
                self.state = 1053
                self.match(SolidityParser.T__39)
                pass
            elif token in [61]:
                self.state = 1054
                self.match(SolidityParser.T__60)
                pass
            elif token in [13, 46, 130]:
                self.state = 1055
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1058
                self.match(SolidityParser.T__21)
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2341943274488471552) != 0 or (((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 6291467) != 0:
                    self.state = 1059
                    self.assemblyExpression()


                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1062
                    self.match(SolidityParser.T__14)
                    self.state = 1063
                    self.assemblyExpression()
                    self.state = 1068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1069
                self.match(SolidityParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLocalDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyLocalDefinition" ):
                return visitor.visitAssemblyLocalDefinition(self)
            else:
                return visitor.visitChildren(self)




    def assemblyLocalDefinition(self):

        localctx = SolidityParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(SolidityParser.T__93)
            self.state = 1073
            self.assemblyIdentifierOrList()
            self.state = 1076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 1074
                self.match(SolidityParser.T__94)
                self.state = 1075
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyAssignment" ):
                return visitor.visitAssemblyAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assemblyAssignment(self):

        localctx = SolidityParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_assemblyAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.assemblyIdentifierOrList()
            self.state = 1079
            self.match(SolidityParser.T__94)
            self.state = 1080
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierOrListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierOrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierOrList" ):
                listener.enterAssemblyIdentifierOrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierOrList" ):
                listener.exitAssemblyIdentifierOrList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIdentifierOrList" ):
                return visitor.visitAssemblyIdentifierOrList(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIdentifierOrList(self):

        localctx = SolidityParser.AssemblyIdentifierOrListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assemblyIdentifierOrList)
        try:
            self.state = 1087
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 46, 130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1082
                self.identifier()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1083
                self.match(SolidityParser.T__21)
                self.state = 1084
                self.assemblyIdentifierList()
                self.state = 1085
                self.match(SolidityParser.T__22)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIdentifierList" ):
                return visitor.visitAssemblyIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIdentifierList(self):

        localctx = SolidityParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.identifier()
            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1090
                self.match(SolidityParser.T__14)
                self.state = 1091
                self.identifier()
                self.state = 1096
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStackAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyStackAssignment" ):
                return visitor.visitAssemblyStackAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assemblyStackAssignment(self):

        localctx = SolidityParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_assemblyStackAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            self.match(SolidityParser.T__95)
            self.state = 1098
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelDefinition" ):
                return visitor.visitLabelDefinition(self)
            else:
                return visitor.visitChildren(self)




    def labelDefinition(self):

        localctx = SolidityParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.identifier()
            self.state = 1101
            self.match(SolidityParser.T__24)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblySwitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblySwitch" ):
                return visitor.visitAssemblySwitch(self)
            else:
                return visitor.visitChildren(self)




    def assemblySwitch(self):

        localctx = SolidityParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.match(SolidityParser.T__96)
            self.state = 1104
            self.assemblyExpression()
            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==98 or _la==99:
                self.state = 1105
                self.assemblyCase()
                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyCase" ):
                return visitor.visitAssemblyCase(self)
            else:
                return visitor.visitChildren(self)




    def assemblyCase(self):

        localctx = SolidityParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_assemblyCase)
        try:
            self.state = 1117
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [98]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1111
                self.match(SolidityParser.T__97)
                self.state = 1112
                self.assemblyLiteral()
                self.state = 1113
                self.assemblyBlock()
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1115
                self.match(SolidityParser.T__98)
                self.state = 1116
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFunctionDefinition" ):
                return visitor.visitAssemblyFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFunctionDefinition(self):

        localctx = SolidityParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.match(SolidityParser.T__31)
            self.state = 1120
            self.identifier()
            self.state = 1121
            self.match(SolidityParser.T__21)
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==46 or _la==130:
                self.state = 1122
                self.assemblyIdentifierList()


            self.state = 1125
            self.match(SolidityParser.T__22)
            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 1126
                self.assemblyFunctionReturns()


            self.state = 1129
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionReturnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFunctionReturns" ):
                return visitor.visitAssemblyFunctionReturns(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFunctionReturns(self):

        localctx = SolidityParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_assemblyFunctionReturns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(SolidityParser.T__99)
            self.state = 1132
            self.assemblyIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFor" ):
                return visitor.visitAssemblyFor(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFor(self):

        localctx = SolidityParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_assemblyFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(SolidityParser.T__27)
            self.state = 1137
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.state = 1135
                self.assemblyBlock()
                pass
            elif token in [13, 40, 46, 55, 61, 109, 110, 112, 130, 131]:
                self.state = 1136
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1139
            self.assemblyExpression()
            self.state = 1142
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.state = 1140
                self.assemblyBlock()
                pass
            elif token in [13, 40, 46, 55, 61, 109, 110, 112, 130, 131]:
                self.state = 1141
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1144
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIf" ):
                return visitor.visitAssemblyIf(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIf(self):

        localctx = SolidityParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_assemblyIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.match(SolidityParser.T__49)
            self.state = 1147
            self.assemblyExpression()
            self.state = 1148
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(SolidityParser.StringLiteral, 0)

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def HexLiteral(self):
            return self.getToken(SolidityParser.HexLiteral, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyLiteral" ):
                return visitor.visitAssemblyLiteral(self)
            else:
                return visitor.visitChildren(self)




    def assemblyLiteral(self):

        localctx = SolidityParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_assemblyLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            _la = self._input.LA(1)
            if not((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 4194315) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubAssemblyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_subAssembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubAssembly" ):
                listener.enterSubAssembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubAssembly" ):
                listener.exitSubAssembly(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubAssembly" ):
                return visitor.visitSubAssembly(self)
            else:
                return visitor.visitChildren(self)




    def subAssembly(self):

        localctx = SolidityParser.SubAssemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_subAssembly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(SolidityParser.T__52)
            self.state = 1153
            self.identifier()
            self.state = 1154
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleExpression" ):
                return visitor.visitTupleExpression(self)
            else:
                return visitor.visitChildren(self)




    def tupleExpression(self):

        localctx = SolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1182
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1156
                self.match(SolidityParser.T__21)

                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -18009914563362303) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3386681098439229437) != 0:
                    self.state = 1157
                    self.expression(0)


                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1160
                    self.match(SolidityParser.T__14)
                    self.state = 1162
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -18009914563362303) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3386681098439229437) != 0:
                        self.state = 1161
                        self.expression(0)


                    self.state = 1168
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1169
                self.match(SolidityParser.T__22)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1170
                self.match(SolidityParser.T__37)
                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -18009914563362303) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3386681098439229437) != 0:
                    self.state = 1171
                    self.expression(0)
                    self.state = 1176
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 1172
                        self.match(SolidityParser.T__14)
                        self.state = 1173
                        self.expression(0)
                        self.state = 1178
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1181
                self.match(SolidityParser.T__38)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExpression" ):
                listener.enterTypeNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExpression" ):
                listener.exitTypeNameExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeNameExpression" ):
                return visitor.visitTypeNameExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeNameExpression(self):

        localctx = SolidityParser.TypeNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_typeNameExpression)
        try:
            self.state = 1186
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40, 58, 59, 60, 61, 102, 103, 104, 105, 106]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1184
                self.elementaryTypeName()
                pass
            elif token in [13, 46, 130]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1185
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(SolidityParser.NumberUnit, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = SolidityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            _la = self._input.LA(1)
            if not(_la==109 or _la==110):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1189
                self.match(SolidityParser.NumberUnit)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Identifier)
            else:
                return self.getToken(SolidityParser.Identifier, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SolidityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.state = 1201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1192
                _la = self._input.LA(1)
                if not(_la==13 or _la==46 or _la==130):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1193
                self.match(SolidityParser.Identifier)
                self.state = 1198
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1194
                        self.match(SolidityParser.T__12)
                        self.state = 1195
                        self.match(SolidityParser.Identifier) 
                    self.state = 1200
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[36] = self.typeName_sempred
        self._predicates[68] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 20)
         




